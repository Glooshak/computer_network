6 - OSI - Open Systems Interconnection - модель организации сети, её приняла ISO -
International Organization of Standartization
включает 7 уровней - физический, канальный, сетевой, транспортый, сеансовый, представления,
прикладной
протоклы в эту модель не включены, а приняты в виде отдельных стандартов

7 - Модель и стек протоколов TCP/IP:
Модель включает 4 уровня - сетевых интерфейсов (физический, канальный),интернет (сетевой),
транспортный (транспортный), прикладной (сеансовый, представления, прикладной)
Transfer Control Protocol / Internet Protocol
Стек сетевых протоколов - сетевых интерфейсов (Ethernet, Wi-Fi, DSL (Digital Subscriber Line)
 - DSL - передача данных черех модем), сетевой (IP, ICMP (Internet Control Message Protocol),
ARP (Address Resolution Protocol), DHCP (Dynamic Host Configuration Protocol)), транспортный
(TCP, UDP (User Datagram Protocol) - доставка быстрая, но без гарантии доставки), прикладной
(HTTP (HyperText Transfer Protocol) - для веба, SMTP (Simple Mail Transfer Protocol) для
почты, FTP (File Transfer Protocol) - для передачи файлов, DNS (Domain Name System)) 
протоколов прикладного уровня гораздо больше
Модель описывает принцип построения сетей, чтобы в них работал стек протоколов ТСP/IP

8 - Физический уровень - передача потока бит по среде передачи данных
единици передачи - бит
характеристики:
1 пропускная способность - бит\сек
2 задержка - сколько времен пройдет прежде чем дойдем до получателя
3 количество ошибок
типы каналов:
симплексные - передача в только одну сторону
дуплексные - в обе стороны одновременно
полудуплексные - в обе стороны, но по очерди
в 1 кабеле - обычно 4 витые пары
для работы сети вайфай - 2,4 ГГц и 5 ГГц

9 - Канальный уровень - передача собщений по каналам связи - кадров, определение начала и
конца кадра в потоке бит, обнаружения и коррекция ошибок, адресация, согласованный доступ к
каналу (если несколько устройств в одном канале). Получает от сетевого уровня пакет, доба
вляет заголовок и концевик к пакету (все в совокупности - это кадр). Как выделить кадр из 
потока бит?
1 Можно в начале заголовка, пакета и концовика указывать длину их в байтах. Правда
при передаче может исказиться сигнал.т
2 Начало и конце каждого кадра отмечаются  специальными последовательностями байтов или бит
Если в кадре обнаружена оошибка (например по контрольной сумме) его можно отпправить еще раз.
Методый повторной отправки:
1 Остановка и ожидание - отправитель передает кадр и останавливает, получатель отправляет 
подтверждение, отправитель передает новый кадр - метод работает в wifi
2 Скользящее окно - отправитель передает несколько кадров один за другим, не дожидаясь под
тверждения - количество кадров, которе можно отправить, называется РАЗМЕРОМ ОКНА - получатель
подвтерждает получение кадров - отправитель передает новую поррцию кадров. Работает там где
скорость передачи выше.
При обноружении ошибки можно либо исправлять эти ошибки, либо запрашивать кадр или кадры по-
новой. Это делается на канальном уровне, или на уровнях, которые выше. Модель OSI разрабаты
валась для каналов связи точка-точка. Но потом к каналу начали подкючать несколько устройств.
Поэтому пришлось разделить канальный уровень на два подуровня - 1 - LLC - Logical Link 
Control - подуровень управления логическим каналом 2 - MAC - Media Access Control - подуровен
управления доступом к среде.
LLC - отвечает за передачу данных (создание кадров, обработку ошибок и т.д.)
MAC - только если технология канального уровня с разделяемым доступом, если точка - точка, то
он не нужен. Адресация, корректное совместное использование. В один и тот же момент канал дол
жен использовать только один отправитель, в проитвном случае произойдет коллизия, и данные
исказяться. Методы управления доступом к каналу: 1 - Рандомизированный, случайным образом вы
бирается устройство с равной вероятностью. 2 - Или у кого находится токен (Token Ring) - одно
устройство, у которого находится токен передает свои данные, потом отдает токен другому и т.д.
Основные технологии канального уровня - Ethernet and Wi-Fi (Wireless Fidelity). 

10 - Технология Ethernet  (передача по медным и отпически проводам) - используется на физи
ческом и канальных уровнях. Ether (эфир) network. IEEE 802.3 для стандартизации Ethernet.
Есть классический и коммутируемый Ethernet.
КЛАССИЧКИЙ!!!
Первый вариант - общая шина - 
Второй вариант: на основе концентраторов (hub), физическая топология - звезда, логическая
топология - все равно общая шина, так как один сигнал, поступающий на один порт концентратора
передается на все остальные порты. Если происходит обрыв, то его место легче определить, так
как перестает работать канал для 1 устройства, а на концентраторе можно определить по цвето
вому сигналу порта.
На физическом уровне Ethernet: коаксильный кабель, витая пара, оптоволокно
Канальный уровень Ethernet: методы доступа и протокоды, одинаковые для любой среды передачи 
данных...
Самый популярный формат кадра Ethernet 2 (римская) - фирменный стандарт компаний DEC, Intel,
Xerox. (популярнее чем IEEE 802.3)
Формат кадра (Ethernet2) состоит из трех частей заголовок, данные, концевик
1 - Заголовок - из 3 частей - 1 - макадрес получателя (6 байт), адрес отправителя (6 байт), 
тип (2 байта - тип протокла следующего уровня - его код - например 0800 - IPv4, 86DD - IPv6)
2 - Данные - 46-1500 байт - есть расширение JumboFrame - до 9000 байт
3 - Концевик - используется для проверки корректности данных - контрольная сумма - 4 байта - 
если не совпадет то кадр отбрасывается, отправителя не уведомляют, ошибки происходят редко,
значит могут быть обработаны протоклами вышестоящих уровней.
* в IEEE 802.3 вместо поля ТИП, используется поле ДЛИНА.

11 - MAC адреса - подуровень управления доступа к среде. Какому именно устройсту передавать 
данные? Регалментированы стандартом IEEE 802 - длина 6 байт. Типы - индивидуальный - для 1
устройства, групповой (группа устройств) - первибый бит старшего адреса равен 1 - например
01-80-С2-00-00-08, широковещательный - для всех устройств сети - все 1 - FF-FF-FF-FF-FF-FF
В одном сегменте сети не должно быть одинаковых МАС-адресов. Способы назначения адресов - 
централизованный - адрес назначается производителем оборудования, ЛОКАЛЬНЫЙ - адрес назна
чается админом сети. Индикатор способа назначения - второй бит старшего байта адреса -
0 - адрес назначен централизовано 1 - адрес назначен локально. (не всегда соблюдается)
Первые три байта - уникальный индентификатор организации производста, вторые три байта - 
назначает сам производитель.
В винде посмотреть - ipconfig /all

12 - Ethernet. Метод CSMA/CD - коллизия - когда сигналы от нескольких устройств накладываются
друг на друга. В классическом Ethernet используется метод доступа к среде
Carrier Sense Multiple Access with Collision Detection - множественный доступ с прослушиванием
несущей частоты и обнаружением коллизий. 
1. Множественный доступ
2. Прослушивание несущей частоты - компьютеры передают инфу, когда среда свободна
3. Обнаружение коллизий - 
к кадру прикрепляется преамбула, чтобы отправитель и получатель могли синхронизироваться и 
распознатьь кадр.
преамбула - 8 байт - первые 7 чередующие 1010101010 в конце 11 - типо преамбула закончилась и
начался кадр
преамбула - кадр - межкадровый интервал (9.6 мкс) - предотвращение монопольного захвата канала
ПЕРИОД КОНКУРЕНЦИИ - Если устройство наччало передавать данные и обнаружило коллизию, то оно
делает паузу - L * 512 битовых интервалов (время между появлением двух последовательных битов)
L - рандом из диапазона (0, (2 ** N) - 1), N - номер попытки. То есть у каждого компа будет
своем время паузы, со временм увелечиения попыток - макс 10 попыток, дальше L не растет, если
эн больше 16 - то перестает передача идти - что то с сетью!
Поэтому у Etherneta плохая масштабируемость - около 30 компов норм в сети, безопасность низкая,
потому что все данные в одной среде. = ЭТО ВСЕ ПРО КЛАССИЧЕСКИЙ ИНЕТ.

13 - Коммутируемый Ehternet - 1995 год - IEEE 802.2u - нет разделяемой среда, нет коллизий,
новые устройства - коммутаторы (switch)
Внутри коммутатора - полносвязная топология - все порты соедены друг с другом по типу точка
точка - работает на канальном уровне, в отличие от классического (физический уровень).
Повышена защита, кадр идет нужному адресату. 
Таблица коммутации - соотвествие MAC адресов портам коммутатора - порт коммутатор - мак адрес
Алгоритм обратного обучения - заполнение таблицы коммутации
Алгоритм прозрачного моста - передача кадров коммутатором - не заметен для сетевых устройств,
он не требует настройки.

14 - VLAN - Virtual Local Area Network - виртуальная локальная сеть - технология разделения
единой сети на несколько логических сетей, изолированных друг от друга.
Преимущества - безопасность, распределение нагрузки.
В таблицу коммутации в коммутаторе добавляется новая графа - VLAN
Что делать если коммутаторов несколько в сети? Нужно передавать информацию между коммутаторами
к какому VLAN принадлежит кадр. Эту информацию необходимо включать в кадр - меняется формат
кадр в IEEE 802.1Q (стандарт) - в поле тип кадра вместо протокола верхнего уровня вставляют
8100 (что значит кадр содержит влан код), дальше забирают у поля данных - 4 байта - 2 байт - 
тег (номер влан) - 2 байта - тип (тот тип код протокла вышестоящего уровня, который был занят)
макс длина кадра была увеличена на 4 байта, чтобы сохранить размер данных (до 1500 байт)

15 - Протокол STP - Кольцевое соединение коммутаторов в сети Ethernet невозможно из-за поя
вления широковещательного шторма. Протокол связующего дерева - Spanning Tree Protocol
Находится на канатльном уровне. Дублируются подключения коммутаторов, чтобы повысеть надежность
Bridge ID - номер коммутатора. Смотри схему соединения коммутаторов. Пример 4 коммунтатора
они подключены кольцом, но одно соединению глушится. На смену STP пришел протокл RSTP - он
быстрее переходит из состояния learning в forward (вместо 30 сек старого) IEEE 802.1w
MSTP - Multiple Spanning Tree Protocol для STP для VLAN IEEE 802.1s

16 - Wi-Fi - IEEE 802.11 Wireless Fidelity - физический и канальные уровни
Может рабоать в двух режимах - инфраструктурный режимк, одноранговая сеть 
Это Ethernet адаптированный для беспроводной сети
Физический уровень - 6 стандартов (от старенького к новенькому)
Среда - электромагнитное излучение
Общий формат кадра уровня LLC - стандарт IEEE 802.2
Физический уровень Wi-Fi - 2,4 ГГц или 5 ГГц, другие устройства также исполльзуют этот диа
пазон и создают помехи (так как частоты можно использовать без лецензировая)
Используют метод OFMD - мультиплексирование с ортогональным частотным разделением - 
Orthogonal Frequency Division Multiplexing
Данные передаются параллельно на разных частотах
В 2.4 ГГц передаются в 14 каналах (чуток разные каналы) больше 14 сетей сложно работать 
Wi-Fi джунгли 
Ширина канала - разница между минимальной и максимальной частотой - чем больше - тем выше 
скорость
Позволяет менять скорость в зависимости от качества сигнала.

17 - Wi-Fi - Управление доступом к разделяемой среде - Как избежать коллизий через среду?
Вероятность ошибки передачи данных выше, чем в проводной среде
Мощность передаваемого сигнала намногов выше, чем принимаемого
Проблема скрытой станции - компьютер может не увидить, что среда занята и начать передавать
в среду (видимость сети вай фай ограничена)
Проблема засвеченной станции
Подтверждение получения данных - так как ошибки чаще происходят, чем в Ethernet 
Коллизия обнаруживается отсутсвием подтверждения кадра - коллизия обходится очень дорого
Метод 	CSCA/CA (COLLISION AVOIDENCE ...) метода решения доступа к среде
Вместо периода конкуренции как в езернете, тут после межкадрого интервала начинается период
молчания, устройства пытаются пропустить друг друга. Есть еще два вида межкадровых интервалов
коротки (после кадра перед передачеей подтверждения получения) и обычный после передачи подт
верждения. 
Но он не решает проблем скрытой и засвеченной станции
Поэтому используют MACA - Мultiple Access with Collision Avoidance
Перед тем как устройство отправляет данные оно посылает управляющее сообщение RTS - Request
To Send (включает размер сообщения с данными)
Получатеь в ответ, если готов, отправляет CTS - Clear To Send - включается размер данных, которые
комп готов принять. Другие компьютеры то же читатют CTS и знают сколько времени молчать

18 - Формат кадр - на уровне LLC - кадр такой же как и в Ethernet.
2 байта - управление кадром - 2 байта - длительност - 6 байт - 1 адрес - 6 байт - 2 адрес - 
- 6 байт - 3 адрес - 2 байта - управление очередностью - 6 байт - 4 адрес (необязательный) - 
- 0-2304 байт - тело кадра - 4 байта - контрольная сумма
Формат кадра Wi-Fi уровня MAC - используется 4 адреса вместо 2ух
DA - Destination adress (адрес получателя) - SA - Source address - (адрес отправителя) - эти
два как в Ethernet
RA - Reciever address - TA - Transmitter address - устройства, которые принимают данные из
беспроводной среды и передают данные в эту среду.
Управление кадром - 2 бита - версия протокола - 2 бита - тип - 4 бита - подтип кадра - в отли
чае от Ethernet тут 3 типа кадров - кадр данных (как в Ethernet) - передача данных - кадры 
контроля (control frames) для обеспечения работы wi-fi - кадры упрления - релазиция разных 
серфисов вайфай - 1 бит - 1 бит - два флага по 1 биту, указывающие направление передачи кадра
To DS of From DS (Destribution system) - 1 бит - MF - флаг для фрагментации кадра - 1 бит - 
RT - флаг при повторной отправка кадра, когда отправитель не получил подтверждение от получа
теля - 1 бит - Power Mgmt - 1 бит - МD - эти два бита используются для управления питанием,
важно для мобильных устрйоств, для экономии энергии, IEEE 802.11 PSM - два режима станции вай
фай - активный и спящий - 1 бит - Protection Frame - кадр, указывающий используется ли шифро
вание или нет - 1 бит - Order - сохраняется ли порядок передачи сообщений или нет (кадров)
Если ошибки возникают слишком часто, например 1 ошибка на 1000 байт, то можно кадр разбить
на фрагменты - такая операция называется фрагментация
На уровне LLC - происходит автоматическое преобразование формата кадра MAC в формат кадра 
Ethernet.

19 - Сервисы Wi-Fi - В технологии Ethernet есть всего один тип сервиса - передача данных
Сервисы:(службы, услуги) наиболее важные - 1 Ассоциация - перед тем как передавать данные по
беспроводной сети вам нужно к ней подключиться - 2 Аутентификация - перед тем как подключиться
к сети полльзователь должен представиться и что он имеет право пользоваться этой сетью - 3 П
ередача данных - 4 Защита данных (шифрование)
Базовый набор сервисов - одна точка доступа - в своем радиусе она рассылает индентификаторы
своих сервисов - BSSID - мак адрес точки доступа - SSID - то что видят люди
Информацию, которую мы передаем по беспроводной сети, доступна всем, ситуация аналогичная
концентраторам Ethernet. Если мы хотим защитить важную для нас информацию, которую мы хотим
защитить, эту информацию необходимо шифровать. В вай фай шифруются только данные, но не заго
ловки. Для того, чтобы узнать, что кадр зашифрован, используется специальный флаг Protection
Frame (WEP - Wired Equavalent Privacy)
Несколько типов шифрования -	WEP на практике уже не используется, очень легко взломать
				WPA(2) Wi-Fi Protected Access 

20 - Сетевой уровеннь - чтобы построить крупную сеть из множества сетей, каждая из которых
построена на разных технологиях (Ethernet, Wi-Fi, 5g, 4g ...). Сетевой уровень - основа Интер
нета. Зачем нужен этот уровень? Почему не использовать канальный уровень? Так как он плохо
масштабируем.  На канальном уровне разные технологии используют разные сервисы. В Ethernet
без гарантии доставки, в Wi-Fi с гарантией доставки.
Тип адресации - в езернет и вайфай используется MAC, в сети сотовой связи - IMEI
Широковещашие - может поддерживаться, а может нет на канальном уровне.
Различие в максимальном размере кадра (Maximum Transmission Unit) MTU
Разные форматы кадров
Что можно сделать на сетевом уровне, чтобы согласовать различия в сетях?
- тип сервиса - например из сети вайфай отправляем кадр в езернет, вайвай ждет подтверждения
от езернет, но его не будет, потому что езернет не отправляет подтверждение, поэтому на уровне
сетевом, автоматически отправляетя подтверждение в вайфай сеть.
- для того что бы согласовать адресацию - на сетевом уровне вводятся ГЛОБАЛЬНЫЕ адреса, не за
висимые от конкретных технологий. Поэтому устройства содержат два адреса - глобальный и лока
льный. Поэтому нужна механизмы определения глобального адреса по локальному (протокол ARP для
ТСP/IP).
- широковещание ...
На сетевом уровне используется фрагментация - чтобы работать с сетями с разными размеров
кадров.
1. Агрегация адресов - сетевой уровень работает не с отдельными адресами, как Ethernet, а 
с группами адресов, которые объединяются, блоками. Блок адресов - сеть. В езернет, коммутатор
(switch) хранит все адреса устройств, это невозможно в сети интернет.
2. Запрет пересылок "мусорных" пакетов: пакет, отбрасывается, если нельзя определить, куда его
нужно отправлять. В езернет, если непонятно кому, то отправляется всем.
3. Возможность наличия нескольких активных путей в сети - (в езернет, наступает широковеща
тельный шторм) одна из причин создания сетей с пакетной коммутацией, допускается несколько а
ктивных сетей, задача выбора лучшего пути - маршрутизация (решается на сетевом уровне).
Задачи сетевого уровня:
- Объединение сетей (interworking)
- Маршрутизация
- Обеспечение качества обслуживания - в данном курсе не рассматривается
Оборудование, которое работает на сетевом уровне, называется маршрутизаторы - это устройство
для объединения сетей. У маршрутизатора есть несколько интерфейсов, через эти интерфейсы под
ключаются сети. У каждого интерфейса есть адрес. Для сравнения своиха адресов у интерфейса
коммутатора нет.
Маршрутизация (routing) - поиск маршрута доставки пакта между сетями через транзитные узлы - 
маршрутизаторы, задачи:
			- учет изменений в топологии сети
			- учет загрузки каналов связи и маршрутизаторов
Продвижение (forwarding) - поиск маршрута для каждого пакета, который пришел на маршрутизатор при
этом маршрутизатор уже знает топологию сети и знает загрузку каналов. В данном курсе не будут
различать два этих термина. Для обоих терминов будут использовать термин маршрутизация.
Каждый раз для новой порции данных, задача маршрутизации решается заново. В случае выхода 
одного из маршрутизатора мы всегда сможем найти новый путь доставки порции даных.
На сетевом уровне модели TCP/IP достаточно много протоколов, основной протокол IP - Internet
Protocol - он используется для передачи данных. ICMP - Internet Message Protocol - используется
для управления сетью. ARP - Address Resolution Protocol - используется для того, чтобы по
глобальному адресу (на сетевом уровне это IP адрес) определить локальной адрес в технологии
канального уровня. DHCP - Dynamic Host Configuration Protocol - протокол динамической конфиг
урации хостов - используется для того, чтобы автоматически назначать IP адреса в составной
сети. Эти 4 протокола будут изучаться в этом курсе. 

21 - IP-адреса - Используется два типа адресов - Локальные и глобальные.
Локальные - это адреса в технологиях канального уровня - это могут быть MAC адреса в Ethernet
или IMEI в 4G, такие адреса не могут использоваться при построении крупной составной сети. Дл
я того чтобы это сделать вводится сетевой уровень, а на нем используется глобальные адреса.
В TCP-IP это IP адреса.  Они не привязаны к технологиям канального уровня.
Есть две версии протокла IP:
- IPv4 (далее просто IP) адрес 4 байта
- IPv6 адрес 16 байт
IPv4 - 4 десятичных числа от 0 до 255, разделенных точками, так как 4 группы по 8 бит (2 ** 8)
Такая часть называется октет. Каждый октет записывают в десятичном виде. 213.180.193.3
Сетевой уровень работает не с отдельными устройствами, а с подсетями. Подсеть - множество
компьютеров, у которых старшая часть IP-адреса одинковая: 213.180.193.1 - 213.180.193.2 и тд
Маршрутизаторы рабтают с подсетями, а не отдельными компьютерами. IP адрес состоит из двух
частей. 1 Номер подсети - старшие биты. 2 Номер хоста (комьютера в сети) - младшие биты. Пр
имер - IP-адрес - 213.180.193.3
	номер подсети - 213.180.193.0
	номер хоста - 3 (0.0.0.3)
Маска подсети показывает, где в IP-адресе номер сети, а где хоста. Структура маски - длина 32
бита - единицы в позициях, задающих номер сети - нули в позициях, задающих номер хоста. Напри
мер- IP 213.180.193.3
IP -	11010101.10110100.11000001.00000011
			AND - применяем логическое и
Маска - 11111111.11111111.11111111.00000000
Подсеть 11010101.10110100.11000001.00000000
Подсеть дясетичный - 213.180.193.0

22 - IP адрес - записал, но проебалось!!!

23 - Протокол IP - Internet Protocol - межсетевой протокол
Появился до того, как интернет стал популярным.
internet - объединенная сеть, subnet - подсеть
Протокол IP в модели OSI и TCP IP находится на сетевом уровне.
На этом уровне так же есть протоколы - ICMP ARP DHCP, но для передачи данных используется 
именно IP протокол, остальные протоколы служат для корректной работы всей сети.
Как и ethernet IP протокол передает данные без гарантии доставки (просто отправляет в сеть в
надежде, что примник примет) и без сохранения порядка следования сообщений.
Если пакет не дошел, то повторно не отправляется пакет, считается, что ошибка происходит редко
и должна быть исправлена протоколами, которые находятся выше. 
Задачи:
- Объединений сетей
- Маршрутизация - поиск маршрута от отправителя к получателю
- Качество обслуживания
Формат заголовка айпи пакета:
1 поле - 4 бита - номер версии (IPv4 или IPv6 (16 байт))
2 поле - 4 бита - длина заголовка - заголовок в отличие от езернета может содержать обязателль
ные поля и опциионые, поэтому нужно знать длину заголовка.
3 поле - 8 бит - тип сервиса - на практике используется очень редко
4 поле - 16 бит - общая длина - длина заголовка, включая заголовок и данные, измеряется в 
байтах, макс значение 65535 байт. На практике длина выбирается с учетом размера кадра 
канального уровня (для езернет 1500 byte)
5 поле - 16 бит - индентификатор пакета
6 поле - 3 бита - флаги
7 поле - 13 бит - смещение фрагмента
5 6 7 поля используются для реализации фрагментации
8 поле - 8 бит - время жизни - TTL Time To Live - максимальное время, в течение которого па
кет может перемещаться по сети. Введено для предотвращения бесконечного продвижения пакетов.
Единицы измерения - секунды или прохождение через маршрутизаторы (hop)
9 поле - 8 бит - тип протокола следующего уровня - предназначено для реализации функции муль
типлексирования и демультиплексирования. Примеры кодов для следующего уровня: TCP - 6 UDP - 
17 ICMP - 1
10 поле - 16 бит - контрольная сумма - проверка правильности доставки пакета, если контроль
ная сумма не совпадает, то пакет отбрасывается, никакой информации отправителю пакета не 
отправляется. Контрольная сумма пересчитываеся каждый раз при проходе очередного маршрутиза
тора, так как данные в заголовке меняются, например - время жизни или опциональные данные.
11 поле - 32 бита - для верси IPv4 - айпи адрес отправителя
12 поле - 32 бита - для верси IPv4 - айпи адрес получателя
на этом обязательная часть заголовка заканчивается
Далее идут необязательные части заголовка, которые называются опции. Некоторые примеры опций:
- записать маршрут
- временные метки - каждый маршрутизатор записывает время прохождения пакета
Это нужно для диагностики
Так же опции позволяют отказаться от автоматической маршрутизации и задавать маршрут отправи
теля - жестка маршрутизаци (указывается через какие маршрутизаторы нужно пройти) и свободная
маршрутизация - указываются только некоторые маршрутизаторы, через которые он должен пройти
обязательно, а другие какие угодно.
Опции могут иметь разный размерю. Длина заголовка IP-пакета должна быть кратна 32 битам. Для
выравнивания до 32 бит поле опций дополняется нулями. 
Стоит отметить, что сейчас опции в заголовке IP-пакета почти не используются.

24 - Маршрутизация - работает на сетевом уровне модели OSI - это поиск маршрута доставки па
кета между сетями через транзитные узлы - маршрутизаторы (switches)
Этапы маршрутизации:
- Изучение сети - какие подсети есть, какие маршрутизаторы и как эти маршрутизаторы объединены
между собой.
- Продвижение пакетов на маршрутизаторе - иногда используется отдельный терми - forwarding
В этом уроке будет рассматриваться второй этап - продвижение пакетов.
Возможные варинты действия у маршрутизатора:
1 - Сеть, которой предназначен пакет, подкллючена непосредственно к маршрутизатору - в этом
случае маршрутизатор передает этот пакет в нужную сеть
2 - Нужная сеть подключена к другому маршрутизатору и мы знаем, какой маршрутизатор нам нужен
такой маршрутизатор называется шлюзом - на него первый маршрутизатор отправляет пакет
3 - На маршрутизатор пришел пакет для сети, которую маршрутизатор не знает - в этом случае
маршрутизатор отбрасывает пакет - в этом отличие от коммутатора (он отправляет на все адреса)
Есть таблица маршрутизации. У маршрутизаторов может быть несколько интерфейсов (какие подсети
к нему подключены, какой у него адрес в этих подсетях - как я понял)
Destination, Gateway...
Поле метрика в таблице маршрутизации используется, если до нужной подсети пожно составить 
несколько маршрутов. Некоторое число, которое характеризует расстояние от одной сет и до другой
. Выбирается маршрут с меньше метрикой. Метрика учитывает не только количество маршрутизаторов
, но и скорость каналов между сетями, загрузка каналов.
Откуда появлятются записи в таблице маршрутизации? Есть два варианта - статическая и динамич
еская маршрутизация. Статическая - записи настраиваются в ручную - а это если у вас сеть не
большая и изменяется редко. Если сеть крупная, то легче использовать динамичускую маршрутиза
цию - в этом случае маршрутизаторы сами изучают сеть с помощьью протоколов маршрутизации - 
RIP OSPF BGP и др. - эти протоколы рассматриваются в продвинутой части курса. Плюс динамичес
кой маршрутизации в том, что все изменения в сети автоматически отображаются в таблице. Марш
рутизор должен знать обо всез существующих сетях - но на практике это невозможно. Поэтому
назначается маршрутизатор по умолчанию (шлюз, default router, gateway) - маршрутизатор, на
который отправляются пакеты для неизвестных сетей. Условное обозначение 0.0.0.0 маска 0.0.0.0
Как правило это маршрутизатор подключенный к интернету. Пример такого маршрутизатора в табли
цу маршрутизации:
Destination	Gateway		Genamask	Metric		Iface
0.0.0.0		172.19.132.64	0.0.0.0		0		wlan0

В операционной системе Linux.
Возможен такой варинат, что маршрутизатор принял пакет с адресом получателся 192.168.100.23
в таблице маршрутизации две записи - 192.168.100.0/24 и 192.168.100.0/16 Какой маршрут выбрать?
Выбирается та запись, где маска длинее. 
Самая длинная маска - 32 - это маршрут к конкретного хосту.
Таблица маршрутизации есть не только у маршрутизаторов , но и увсех хостов сети. Она горазде 
меньше. Состоит из - присоединенная сеть, маршрутихатор по умолчанию (шлюз, gateway) и необ
язательно - маршруты к знакомым сетям. Для того чтобы просмотреть таблицу маршрутизации - 
route print - windows
rout - linux
ip rout - linux
=============================================================================================
25 - Протокол IP: фрагментация
=============================================================================================
Основное различие в сетях - максимальный размер передаваемых данных:
1 - Ethernet - 1500 байт
2 - Token Ring - 4464 байта
3 - FDDI - 4352 байта
Что делать, если на маршрутизатор пришел пакет больше, чем способна передать сеть. В этом слу
чае используется фрагментация - разделение пакета на несколько частей (фрагментов) для перед
ачи по сети с маленьким MTU - Maximum Transmission Unit.
Для фрагмантации в заголовке IP пакета используетсяс 3 поля:
1 - Индентификатор пакет 16 бит - задает номер пакета, которое разбито на фрагменты - это по
ле одинаковое во всех фрагментах пакет.
2 - Флаги 3 бита - на практике используется только 2 бита:
- Первый бит зарезервирован и не используется
- DF - Don't Fragment - не фрагментирован - означает запрет фрагментирования
- MF - More Fragments - есть еще фрагменты - о том, что полученный фрагмент пакета не послед
ний, будут еще пакеты.
3 - Смещение фрагмента 13 бит - фрагменты пакета могут придти в разном порядке:
Измеряется в 8 байтовых блоках. Пример:
Исходный пакет 4000 байт (заголово IP 20 байт, данные 3980 байт). Мы хотим передать этот пак
ет через сеть Ethernet, у которой MTU = 1500 байт (20 байт заголовок IP, данные 1480 байт). 
Таким образом данные пакета размером 3980 байт будут разделены на три фрагмента:
0 - 1479 ... 1480 - 2959 ... 2960 - 3980 , для того чтобы получить смещение, мы должны взять
значение первого байта у каждого фрагмента и разделить на 8 - и получим - 0 185 370.
Сборка пакета происходит в обратном порядке.
Флаг DF используется для того, чтобы запретить фрагментацию на маршрутизатор. Если это флаг 
установлен, то маршрутизатор не имеет право фрагментировать этот пакет. Ести MTU сети меньше
размера пакет, то:
Маршрутизатор отбросит пакет и отправит получателю ICMP сообщение типа 3, код 4 (Destination
Unreachable, Fragmentation required, and DF flag set).
Стоит отметить, что в IPv6 отказались от фрагментации на маршрутизаторах, узлы отправители 
должны сами подобрать максимальный размер пакета с помощью технологии Path MTU Discovery.
- эту технологию будут рассматирвать в курсе, когда будут говорить о IPv6.
=============================================================================================
26 - Управляющие протоколы сетевого уровня
=============================================================================================
Одного протокола IP недостаточно. На сетевом уровне дополнительно используются - управляющие
протоколы - ARP DHCP ICMP

DHCP - Dynamic Host Configuration Protocol - протокол динамической конфигурации хостов. Авто
матическое назначение айпи адресов в крупной сети.

ARP - Address Resolution Protocol - протокол разрешения адресов. Протокол ARP повзоляет опре
делить по IP-адресу компьютера его MAC-адрес. Сетевой уровень и канальный.

ICMP - Internet Control Message Protocol - протокол межсетевых управляющий сообщений. Испол
ьзуется для двух целей. Первая - сообщение об ошибках в работе сети, таких как - получатель
недоступен, закончилось время жизни пакета TTL, запрещено фрагментировать пакет. Вторая цель
- тестирование работы сети - ping - проверка доступности получателя, traceroute - определение
маршрута к получателю.
=============================================================================================
27 - Протокол DHCP
=============================================================================================
Dynamic Host Configuration - протокол динамической конфигурации хостов. Для работы в сети ну
жен IP адрес. Можно назначать вручную - очень долго, если устройств много. Протокол DHCP по
зволяет назначать IP адреса компьютерам в сети автоматически. Требует создания инфраструктуры
- DHCP сервера. Одному и тому же компьютеру сервер DHCP может назначать разные IP адреса. Про
токол работает по модели клиент-сервер. 
Клиент получает айпи адрес, а сервер раздает айпи адреса и следит за тем, чтобы один и тот
же айпи адрес не был выдан разным клиентам. Клиент и сервер обмениваются сообщениями в реал
ьном времени.
Процесс получения айпи адреса хостом (DORA) - по операциям:
1 Discover
2 Offer
3 Request
4 ACK (Acknowledge)

так же есть другие сообщения NACK - запрет использования запрошенного айпи адреса
RELEASE - освобождение адреса
INFORM - запрос и передача дополнительной конфигурационной информации

DHCP серверов в сети может быть несколько.

Назначение адресов:
1 - Фиксированный - выделенный IP адрес для каждого MAC адреса
2 - Динамический - выделение компьютеру любого IP адреса из пула адресов - айпи адрес выде
ляется клиенту на ограниченное время - время аренды (lase time) - типичное время 1 час, 1 су
тки, 3 суток и т.п. После окончания времени айпи адрес освобождается.
При выключение компьютера, компьютер отправляет DHCP сообщение Release - то есть автоматичес
ки освобождает айпи адрес.
DHCP предоставляет дополнительно:
маску подсети
шлюз
адреса DNS-серверов
адреса серверов времени
маршруты
и другую информацию
=============================================================================================
28 - Протокол ARP
=============================================================================================
Adress Resolution Protocol - протокол разрешения адресов. Необходимо средство определения
МАС адреса компьютера по его IP адресу.
Можно создать таблицу соответствия - чтобы посмотреть в линуксе - cat /etc/ethers
В крупной сети такой подход не работает.  Протокол ARP позволяет автоматически определить 
MAC адрес компьютера по его IP адресу. Он работает в режиме запроса-ответа.
Этот протокол в модели OSI находится на стыке канального уровня и сетевого уровня.  Поэтому
пакеты ARP не проходят через маршрутизатор. Поэтому можно узнать МAC адреса компьютеров то
лько в одной подсети. Широковещательный трафик - не проходит через маршрутизатор.
Посмотреть таблицу ARP на компьютере можно с помощью команды arp - a. Динамический тип - 
комьютер сам вводит графы (периодически обновляется). Статический тип - то что ввел человек.
============================================================================================
29 - Протокол ICMP
============================================================================================
Internet Control Message Protocol - протокол межсетевых управляющих сообщений. Протокол IP п
редоставляет сервис передачи данных без гарантии их доставки - в случае ошибки при передачи
пакета никаких действий не предпринимается.
Функции ICMP - 1 оповещать об ошибках на сетевом уровне
		2 тестировать работоспособность сети
Сообщения об ошибках ICMP не обязательно должны обрабатываться.
Формат пакета ICMP:
1 - 1 байт - тип сообщения -  оно говорит о том, какая ошибка проихошла, или какое действие
по диагностики пытаются выполнить
2 - 1 байт - код сообщения - в нем более подробно описывается тип ошибки, ее причина или диа
гностическое действие
3 - 2 байта - контрольная сумма - проверка правильности доставки
4 - 4 байта - служебная информация
поле данных - в это поле включается фрагамент пакета при передаче которого произошла ошибка

Самое главное это тип, например есть тип 10 - запрос сообщения о маршрутизаторе - компьютер,
который только подключился к сети может и не ждать переодического сообщения от маршрутизатора
а послать вот такой вот запрос, и ему ответит маршрутизатор.

Код сообщения: наприимер 0 - сеть недостижима итд

Утилиты - ping и traceroute (windows tracert)

traceroute - как мы узнаем количество маршрутизаторов? сначало создается пакет с TTL = 1, 
он доходит до 1 маршрутизатора, и его маршрутизатор отправляет назад с ошибкой, что закончи
лось время жизни и свой айпи, на следующий маршрутизатор TTL = 2 и так далее. Маршрутизаторы
отправляет сообщения как раз таки по протоколу ICMP.
Я бы добавил что ICMP-пакеты инкапсулируются в IP пакеты. И конечно они не используют TCP и
UDP. Многие просто путаются.
============================================================================================
30 - Передача пакетов на сетевом и канальном уровне
============================================================================================
Каждый пакет, который передается по сети содержит два адреса - IP-адрес и MAC-адрес. Маршру
тизаторы могут иметь несколько интерфейсов (связка айпи адреса и мак адреса) - для каждой под
сети свой интерфейс.
Айпи адреса в пакете сохраняются постоянными. Мак адреса постоянно меняется, в зависимости от
того через какую подсеть проходит пакет.
============================================================================================
31 - Транспортный уровень
============================================================================================
Что в OSI, что TCP/IP это транспортный уровень. 4 уровень в OSI, 3 уровень в TCP IP. 
Задача транспортного уровня - передача данных между процесссами на хостах
				- адресация - для какого процесса (программы на компе - почта
скайп, браузер) предназначен тот или иной пакет
				- предоставление надежности передачи данных, не зависимого от 
надежности сети.

хост - сетевое оборудование (сетевой, канальлный, физический) - хост
на хостах есть все уровни - то есть транспортные уровни напрямую взаимодействуют с собой на
разных хостах, минуя сетевое оборудование. Сквозное соединение. 

Для адресации на транспортном уровне используются порты. Это число от 1 до 65535. Адрес назы
вается порртом. Каждое сетевое приложение на хосте имеет свой порт. Номер порта у приложения
не повторяется. Форм записи - 192.168.1.3:80 (айпи и порт). 
Есть три типа портов:
1- хорошо известные порты - от 1 до 1024 - 80-http(web) 25-SMTP(электронная почта) 
				53-DNS 67,68 DHCP - все эти порты может использовать только 
				root/Админ
2- зарегистрированные порты: 1025-49151 - Регистрация в Internet Assigned Numbers Authority
						IANA
3- динамические порты 49151-65535 - автмоматически назначаются операционной системой сетевым
					приложением

Например, мы можем с одной машины, у которой один айпишник, обращаться на один и тот же веб
сервер но с разных браузеров (ос им назначит разные номера портов) и веб сервер будет поним
ать куда отправлять данные, в какое приложение, в какой браузер.

Транспортный уровень можеет обеспечить надежность передачи данных выше, чем у лежащегго в его
основе сети.

Гарантия доставки данных - подтверждение получения и повторная отправка не подтвержденных да
ннах

Гарантия порядка следования сообщения - нумерация сообщений.

На транспортном уровне используется два протокола TCP and UDP. TCP - который обеспечивает
надежность доставки. UDP - не гарантирует доставку данных, но зато работает быстрее, чем TCP.
Для взаимодействия с транспортным уровнем используется интрефейс сокетов. 

Приложение -интерфейс сокетов- Транспортный уровень

До этого в курсе не рассматривались интерфейсы между уровнями, потому что они были скрыты. Ту
т щас будут рассматривать.
==============================================================================================
32 - Протокол UDP
==============================================================================================
Это протокол транспортного уровня. Не обеспечивает надежную доставку данных. 
User Datagram Protocol - протокол дейтаграмм пользователей. Сообщение UDP называется дейтагр
амма - аналогия с телеграммой.
Особенности:
- нет соединения 
- нет гарантии доставки данных
- нет гарантии сохранения порядка сообщений

Надежность доставки по сравнению с IP не повышается. А зачем он тогда вообще нужен? Потому
что на транспортном уровне указывается порт отправителя и порт получателя. 
Формат заголовка:
4 поля:
- порт отправителя 16 бит
- порт получателя 16 бит
- длина UDP 16 бит
- контрольная сумма UDP 16 бит
Длина UDP - миниму 8 байт - только заголовок, Максимум - 65 515 байт (максимальная длина па
кета)
Преимущество UDP - скорость работы - нет накладных расходов на устновку соединения.
Надежность - в современных сетях ошибки происходят редко - ошибку может обработать приложение
Область применения - клиент-сервер, короткие запросы-ответы.

Например, с помощью протокола UDP идет запрос и получение ответа от клиента к серверу DNS.
Приложение должно само обрабатывать ошибочные ситуации.
Оснавная задача - указать порты отправителя и получателя. 
=============================================================================================
33 - Протокол TCP
=============================================================================================
Транспортный уровень. Один из основных протоколов стека протоколов TCP IP.
Transmission Control Protocol - протокол управления передачей.
Сервис TCP - надежная передача потока байт (reliable byte stream)
Гарантии - доставка данных, сохранение порядка следования сообщений.
От приложения протокол ТСP получает поток байт, который может быть очень большим. В протоколе
TCP потом байт делится на отдельные части - сегменты. Каждый сегмент отправлется отдельно
получателю. Получатель собирает сегменты и передает принимающему приложению поток байт.
Для того, чтобы обеспечить гарантию доставки данных, используется подтверждение получения.
Подтверждение - ACK - Acknowledgment
Отправитель устанавливает таймер, если в течение какого-то времени подтверждение не пришло,
таймер срабатывает, и тот же самый сегмент отправляется повторно.
В протоколе TCP подтверждается не каждый сегмент, а несколько сегментв отправленных друг за
другом.
Механизм скользящего окна - будет рассмотрен в следующих лекциях.
Подтверждения и повторной отправки недостаточно для надежной передачи потока байт. Это обесп
ечивает защиту от потери сегментов, но происходит нарушение порядка следования сообщений - се
гменты приходят в неправильном порядке - плюс дублирование сегментов.
Механизм обеспечения сохранения порядка следования сообщений - нумерация сообщений.
Перед отправкой данных по TCP необходмио установить соединение. Задачи соединения:
- убедиться, что отправитель и получатель хотят передавать данные друг другу
- договориться о нумерации потока байт
- договориться о параметрах соединения (максимальный размер сегмента и т.п.)

После завершения передачи данных соединение TCP разрывается.
=============================================================================================
34 - Протокол TCP - скользящее окно
=============================================================================================
Варианты подвтерждения:
- остановка и ожидание (Wi-Fi, канальный уровень)
- скользящее окно (TCP, транспортный уровень)

Скользящее окно - в этом случае отправитель передает сразу несколько порций данных, не дожи
даясь подтверждения. Получатель отправляет одно подтверждение, которое называется кумулятивн
оее. Это означает, что получатель получить последнюю порцию данных и все предыдущие. 

Почему удобно использовать скользящее окно? - Сообщение передается по сети хоть и быстро, но
не мгновенно - время передачи короткое, но не нулевое. Поэтому в среду может находится некот
орый объем данных:
	- скорость x задержка
	- небольшой объем для локальных сетей, так отправитель и получатель рядом друг с другом
	- большой объем для широких территориально-протяженных каналов.

Поэтому в больших сетях ожидание подтверждения приводит к снижению производительности.

Размер окна - количество байтов данных, которые могут быть переданы без получения подтвержде
ния.

Есть два типа подтверждения:
1. Кумулятивное подтверждение:
			- подтверждение приема указанного байта данных и всех предыдуших
			- используется по умолчанию в протоколе
2. Выборочное подтверждение (Selective Acknowldedgement, SACK):
			- подтверждение диапазонов принытх байт
			- эффективно при большом размере окна
			- дополнительное поле заголовка ТСP (параметр) - по умолчанию не ис
			пользуется
=============================================================================================
35 - Протокол TCP - соединение
=============================================================================================
Еще раз - протокол обеспечивает - гарантию доставки - гарантию сохранения порядка следования
сообщений.
Процесс передачи данных в TCP:
- устанновкка соединения
- передача данных
- разрыв соединения

Как происходит соединение? Отправитель отправляет получателю сообщение SYN (от слова синхрони
зация), так же в сегмент включается номер порядкого байта. Получатель передает сообщение SYN, 
куда включает подтверждение предыдущего сообщения ACK и порядковый номер байта, который он
ожидает. Так же включает в сегмент номер байта в потоке байт ??? На третьем этапе отправитель
чо то еще там отправляет. Короче смотри презентацию. После этого соединение считается устано
вленым и можно начинать передавать данные.

Рассмотрим, как происходит разрыв соединения. Соединение в сети дупликсное - данные могут 
передаваться в обе стороны.
Есть две схемы разрыва соединений:
- одновременное (обе стороны разорвали соединени)
- односторонее (одна сторона прекращает передавать данные, но может принимать)

Протокол предусматривает два варинта разрыва соединения:
- односторонее закрытие (FIN) - кореектное завершение
- разрыв из-за критической ситуации (RST)

Таким образом накладные расходы выше, чем в UDP, но соединение и отправка подвтерждений позв
оляет TCP обеспечивать гарантию доставки и гарантию сохранения порядка следования сообщений.

+Ruslan Alpysbayev Протокол TCP получает от приложения поток байт (например, фильм размером 2
 ГБ). Этот поток разбивается на отдельные части - сегменты, которые передаются по сети отдель
но. Для гарантии доставки используется подтверждение получения сегментов и нумерация. 


Можно нумеровать сегменты, но по разным причинам это неудобно (например, сегменты могут иметь 
разный размер). Поэтому TCP вместо сегментов нумерует байты в потоке. Например, первый 
сегмент содержит байты с 0 по 999, второй с 1000 по 1999 и т.д. (в примере с фильмом до 2 ГБ). 


Более подробно об этом рассказано в лекции о протоколе TCP:
https://www.youtube.com/watch?v=CKUOb4htnB4

На самом деле байты в потоке нумеруются не с 0, а по более сложным правилам. Если всегда 
начинать нумерацию с 0, то если компьютер захочет открыть два соединения, сегменты из них могут 
перепутаться. Также есть много других проблем. Поэтому для начального номера байт в потоке 
выбираются разные числа так, чтобы они не совпадали ни с каким другим соединением на данном 
компьютере. Алгоритмы достаточно сложные, но для простоты можно представлять себе, что 
начальный номер байта в потоке выбирается случайным образом. Именно этот номер и 
указывается в сегменте SYN при установке соединения.


Стало ли понятнее?

cmd - протоколы соединения TCP - NETSTAT -A
============================================================================================
36 - Протокол TCP - формат заголовка
============================================================================================
Это самый сложный протокол, который рассматривается в рамках курса. Больше всего полей.

Длина - 32 бита

1. Порт отправителя

2. Порт получателя

3. Порядковый номер - протокол получает от вышестоящего уровня поток байт, который делится на
сегменты. Первый номер байта в сегменте - это порядковый номер сегмента. Если мы используем
сеть Ethernet то, как правило, размер сегмента составляет 1460 байт, тк. 1460 байт сегмент +
20 байт заголовок TCP + 20 байт заголова IP = 1500 байт - размер кадра в сети Ethernet.

4. Номер подтверждения. Используется для обеспечения гарантии доставки сообщения. Указывается
не номер последнего байта, который получен, а номер следующего ожидаемого байта.  
 
5. Длина заголовка. Так как заголовок TCP состоит из двух частей - обязательная и необязатель
ная. Длина обязательной части 20 байт. Длина необязательной может быть разной. 

6. Три зарезервированных бит, которые сейчас не используются. И 9 полей флагов - NS CWR ECE -
исользуются для управления перегрузкой - URG - в сегементе содержатся срочные данные, которые
необходимо быстро передать приложения - ACK - ACKNOWLEGEMENT -  PSH RST SYN FIN

7. Размер окна - в этом поле получатель указывает, сколько данных он может принять - для упра
вления потоком.

8. Контрольная сумма - для провереки правильности доставки данных

9. Указатель на срочные данные

10. Параметры (необязательная часть)

11. Данные (необязательная часть) - без данных используется, например, при установке соедине
ний.

В отличие от IP в этом протоколе параметры используются часто. Например:
- максимальный размер сегмента MMS Maximum Segment Size - сегмент какого размера может принять
получать
- мастшта окна - позволяет увеличить размер окна до 1 ГБ, что эффективно для быстрых каналов
- выборочное подтверждение (Selective Acknowledgment SACK) - подтверждение диапазона принятых
байт. а не всех данных до определенного байта. Полезно, если потерян один сегмент в большом 
потоке данных.
- метки времени - для диагностических данных 
=============================================================================================
37 - Протокол TCP - управление потоком
=============================================================================================
В сети могуть быть устройства разной производительности. Управление потоком (flow control) 
предотвращает "затопление" медленного получателя быстрым отправителем. Другой случай - прило
жение не обязано читать данные сети, как только они появились. Приложение может быть занято
какими-то другими важными делами. Оно может читать данные сети по расписанию. Данные, которые
посылают по сети, записываются в какой-то промежуточный буфер, из которого приложение когда
то их подцепит. Но что произойдет, если приложение эти данные не читает? Будут отбрасываться
сегменты.
Для предотвращение такого пагубного явления, в заголовке TCP есть поле - размер окна - в этом
поле получатель указывает сколько байт он может принять. Если отправитель слишком долго ждет,
он может отправить Zero Window Probe, чтобы получатель подтвердил, что размер окна все еще 
равен 0. Это нужно, чтобы убедиться, что поулчатель все еще остается на связи, и не возникли
какие-либо ошибки. 
=============================================================================================
38 - Протокол TCP - управление перегрузкой
=============================================================================================
Congestion control
Может быть следующая проблема: в буфере получателя может быть достаточно места, но сеть, через
которую передаются данные - перегружена. Перегрузка - отправители передают в сеть большое кои
чество данных, однако большая часть из этих данных отбрасывается маршрутизаторами и не доходит
до получателей.
Решение:
- учет загрузки сети при определении размера окна
- традиционный подход: фиксированное окно 8 сегментов
- предложенный подход: размер окна динамически меняется в зависимости от нагрузки на сеть
- механизм реализации: окно перегрузки

Окно перегрузки существует на стороне отправителя. Его размер расчитывается отправителем в 
зависимости от нагрузки на сеть.

Управление скоростью передачи в TCP:

1. Маленький размер окна:
- сегментов в сеть отправляется мало, не полностью используется пропускная способность сети
- низкая скорость передачи данных

2. Большой размер окна:
- сегментов в сеть отправляется слишком много, происходит перегрузка и маршрутизаторы 
отбрасывают пакеты
- низкая скорость передачи данных

Необходим способ определения оптимального размера окна. Для этого используется метод AIMD - 
Addive increase multiplicate decrease (аддитивное увеличение, мультипликативное уменьшение)
Как отправитель узнает о том, что в сети произошла перегрузка? Это достаточно сложная задача - 
есть следующие сигналы о перегрузки сети:
- потеря сегмента
- задержка сегмента
- сигнал от маршрутизатора - ECN - Explicit Congestion Notification

Проблема AIMD - медленный (линейный) рост размера окна перегрузки:
- приемлимо на медленных каналах
- непримемлимо на быстрых надежных каналах

Медленный старт - альтернативный метод управления размерром окна перегрузки:
- первоначально размер окна перегрузки устанавливается маленьким (1 или 4 сегмента)
- при каждом получении подтверждения отправляется 2 сегмента (в АIMD на 1)
- экспоненциальный рост размера окна 1 2 4 8 16 32 итд
- после сигнала о перегрузке начинаем с начала

В TCP используется связка медленного старта и AIMD, сначало медленны старт - потом AIMD, 
есть формула для расчета порога медленного старта - до какого момента работает медленный старрт
=============================================================================================
Протокол TCP: управление перегрузкой, часть 2
=============================================================================================
Есть три вида сигнала, по которым отправитель может понять, что в сети произошла перегрузка:
- потеря сегмента
- задержа сегмента
- сигнал от маршрутизатора

Проблемы сигнала "потеря сегмента":

1. TCP создает перегрузку:
- размер окна постоянно увеличивается
- окно начинает уменьшаться только после того, как перегрузка произошла

2. Глобальная синхронизация TCP (TCP global synchronization):
- место в буфере маршрутизатора заканчивается, он отбрасывает все новые сегменты
- отправители получают сигнал о перегрузке и уменьшают размер окна
- передача данных начинается всеми отправителями почти одновременно, в результате на маршру
тизатор одновременно приходит большое количество пакетов, что опять же ведет к перегрузке.

Сигналы:

2. Задержка сегмента - измеряются Round Trip Time - время движения от отправителя к получате
лю и обратно. При существенном увеличении RTT происходит уменьшение окна перегрузки.
Проблемы сигнала "задержка сегмента":
1. Надежность ниже, чем у задержки сегмента
2. Несправедливость на загруженных каналах:
- размер окна уменьшается при задержке сегмента, а другие отправители уменьшают только при п
отерях сегмента
Решение:
- совместное использование сигналов задержки и потеря сегментов
- пример - Compound TCP компании Microsoft

3. Сигнал от маршрутизатора:
- Random Early Detection - заранее отбрасавет пакеты при приближении переполнения буфера - 
это неявный сигнал, отправитель по отброшенным сегментам может понять, что надо снижать разм
ер окна
- Explicit Congrestion Notification - явный сигнал от маршрутизатора - что надо уменьшать ра
змер окна - маршутизатор в заголовок айпи ставит флаг, что сеть перегружена, это пакет дохо
дит до получателя, и когда получатель отправляет подтверждение о получении сегмента к отправ
ителю ставит флаг в заголов TCP (ECE - ECN-Echo) устанавливается получателем при получении с
игнала о перегрузке от маршрутизатора, далее отправитель ставит CWR (Congrestion Window Redu
ced) - устанавливается отправителем для подтверждения получения сигнала о перегрузке.
=============================================================================================
40 - Интерфейс сокетов
=============================================================================================
Транспортный уровень. Интерфейсы применяются для взаимодействия с разными уровнями. До этого
в этом курсе интерфейсы не рассматривались. Но на транспортном уровне - это первый уровень,
с которым может взимодействовать программист.

Сокеты - де-факто стандарт для транспортной системы. Разлычные варианты сокетов раелизованы в
разных ОС и языках программирования.

Операции сокетов Беркли:
создание сокетов:
- Socket - создать сокет
- Bind - связать сокет с IP адресом и портом
- Listen - объявить о желании принимать соединения
установка соединения:
- Accept - принять запрос на установку соединения
- Connect - установить соединение
передача данных:
- Send - отправить данные по сети
- Receive - получить данные из сети
закрытие:
- Close - закрыить соединение

Модель клиент-сервер. Взаимодействующие стороны сокетов Беркли:
- сервер
- клиент

Сервер работает(слушает) на известном IP-адресе и порту и пассивно ждет запросов на соедине
ние

Клиент - активно устанавливает соединение с сервером на заданном IP и порту.

Сервер					Клиент

Socket					Socket
Bind					Connect
Listen					Send
Accept					Close
Receive

Когда клиент соединяется с сервером создает копия сокета на сервере, и с этой копией клиент
общается, а оригинал на сервере ждет следующего клиента.

Протоколы сетевого уровня:

socket.AF_INET = IPv4

socket.AF_INET6 - IPv6

Протоколы транспортного уровня:

socket.SOCK_STREAM - TCP

socket.SOCK_DGRAM - UDP

Есть и другие типы, но они используются редко

В видео есть код для создания клиента и сервера на Python

Программист взаимодействует с транспортным уровнем через интрефейс сокетов - протоколы скрыт

ы от программиста. При изменении протоколов транспортного уровня программу менять не 
придется

Первоначально сокеты в Unix использовались для взаимодействия процессов на одном компьютере. 
Процессы, даже если они на одном компьютере, изолированы друг от друга, поэтому для 
передачи данных им нужны сторонние механизмы (inter-process communication). Сокеты - один 
из механизмов обмена данными между процессами с помощью файлового дескриптора: один процесс 
пишет в файл специального вида, а другой читает. Это сокеты протокола Unix.

С появлением сетей TCP/IP оказалось что абстракция сокетов хорошо подходит не только для 
взаимодействия процессов на одном компьютере, но и по сети. Процессы по прежнему пишут 
данные в файл и читают из него, но данные передаются по сети. Собственно передача данных 
выполняется операционной системой и скрыта от программиста. Такие сокеты называют Интернет 
сокетами. Определяются они не именем файла, как Unix сокеты, а парами IP-адрес и порт для 
клиента и сервера.
============================================================================================
41 - Протоколы, интерфейсы и сервисы. Примеры
============================================================================================
Базовые понятие компьютерных сетей:

Сервис - описывает какие функции реализует уровень

Интерфейс - набор приммитивных операция, которые нижний уровень предоставляет верхему.

Протокол - правила и соглашения, используемые для связи уровня N одного компьютера с уровнем
N другого компьютера.

Зачем разделять понятия протокола и интерфейса?

1. Изоляция решений:
- общие принцип проектирования: описание и реализациия должны быть отдельны друг от друга

2. Внутри компьютера:
- взаимодействие через интерфейсы, которые постоянны
- протколы могут меняться

3. Между компьютерами:
- взаимодействие по протоколам, которые постоянны
- интерфейсы внутри различных комьютеров могут сильно отличаться друг от друга.

Зачем разделять интерфейс и сервис?

1. Сервис:
- абстрактное описание того, что делает уровень

2. Сервисы транспортного уровня TCP/IP:
- надежная передача потока байт (реализуется протоколом TCP)
- ненадежная передача коротоких сообщений (реализуется протоколом UDP)

3. Интерфейс:
- набор операций для доступа к сервису

4. Интерфейс транспортного уровня:
- сокеты
- через один интерфейс сокетов моожно получить доступ к сервисам двух типов: надежной и нена
дежной доставке данных.
=============================================================================================
42 - Трансляция сетевых адресов (NAT)
=============================================================================================
NAT - Network Address Transkation - трансляция сетевых адресов.

Технология преобразования IP-адресов внетренней (частной) сети в IP-адреса внешней сети Инт
ернет.

Цель создания - преодоление нехватки адресов IPv4.

Внешние IP-адреса:
- применяются в сети Интернет
- должны быть уникальными
- распределяются ICANN
- адресов IPv4 не хватает для всех устройст в Интернет (количество адресов IPv4 примерно 4 
млрд.)

Внутренние IP-адресаа:
- диапазон частных сетей (RFC 1918): 10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16
- не маршрутизируются в Интернет
- могут использоваться без обращения в ICANN
- допускается использование одинаковых адресо в разных сетях (т.к. они не будут видны в Интер
нет)

Как работает?
Предположим у нас есть внутренняя сеть, есть интернет, внутренняя сеть подключается к Интер
нет через устройство NAT. Это устройство имеет один внешний IPv4 адрес.

Типы NAT:
1. Статический - отображение один к одному - каждому внтреннему айпи адресу соответсвует 
внешний. - используется редко.
2. Динамичкий NAT - отображение внутренниз адресов на группу внешних адресов. Внешних адресо
в меньше, чем внутренних, и компьютеры по очереди используют внешние адреса.  
3. Один ко многим (maquerading) - отображение внутренниз адресов на один внешний адрес. - 
используется чаще всего.

Рассмотрим 3 тип:

Преобразование выполняется с помощью таблицы NAT

Использует комбинацию IP-адрес плюс порт

Вид таблицы 

Внутренний IP	Внутренний порт		Внешний IP	Внешний порт

					тут один адр	разные с внутренним

Преимущества NAT:
- позволяет преодолевать нехватку адресов IPv4
- легко развернуть и использовать
- скрывает стуктуре сет от внешнего мира

Недостатки NAT:
- нарушение фундаментального построения IP-сетей; каждый компьютер может соединиться с любы
м другим
- нет возможности подключится к компьютерам во внутренней сети из внешнего мира
- плохо работают протоколы не устанавливающие соединение
- некоторые прикладные протоколы работают неправильно - FTP
- нет единого стандарта NAT, много разных вариантов.

Решение проблем с NAT:

1. Статическое отображение IP-адресов:
- чтобы каждой машине соответствовал свой внешний IP-адрес

2. Статическое отображение портов:
- не понял нихуя

3. Технология NAT Traversal:
- позволяет устанавливать соединение с компьютерами во внутренней сети
- RFC 3489 и другие варианты
- используется VoIP приложениями (Skype)
=============================================================================================
43 - Межсетевые экраны
=============================================================================================
Отделяет сеть от других сетей. Другие названия - брандмауэрб firewall.

Сетевой экран может устанавливатья на целую сеть или он может находится на одном устройстве.

Межсетевые экраны работтают на транспортном и сетевом уровнях OSI. В основном они анализуруют
IP-адреса и порты подключаемых соединений. Они перехватывают все пакеты из внешней сети и из
внутренней. 

У межсетевого экрана есть таблица правил - что пропуска, а что нет. Проверяет заголовки.
Чтобы избежать атак, межсетевой экран также хранит список соединений TCP.  

Возможно снижение производительности сети.

Другие методы ограничения доступа:

1. Канальный уровень:
- фильтрация на портах коммутатора по MAC-адресам

2. Прикладной уровень:
- прокси сервер (proxy server)
- фильтр содержимого (content filter) - анализ не только заголовков, но и содержимого

3. Система обнаружения вторжения (intttusion detection system, IDS)

4. Система предотвращения вторжения (instrusin prevernsion system, IPS)
=============================================================================================
44 - Прикладной уровень
=============================================================================================
В обеих моделях это самый верхний уровень. Этот уровень необходим для взаимодействия между
собой сетевых приложений - веб, электронная почта. На этом уровне большое количество при
кладных протоколов, такие как HTTP - для просмотрат веб страниц,  SMTP - для передачи
электронной почты,  DNS - по доменному имени определить IP-адрес сервера, FTP - для передачи
файлов. POP3 IMAP - почта.

В модели TCP/IP прикладной уровень - это единственный уровень, который находится выше транс
портного. А в модели OSI выше транспортного уровня есть - уровни Сеансовый и Представления.

Функции сеансового уровня:

1. Сеанс(сессия) - это набор связанных между собой сетевых взаимодействи, направленных на реш
ение одной задачи. 
2. Загрузка Web-страницы:
- загрузка текста страницы html
- загрузка стилевого файла css
- загрузка изображений
3. Подходы к загрузке Web-страницы:
- для каждого элемента создается отдельное соединение (HTTP 1.0)
- загрузка всех элементов через одно соединение TCP (HTTP keep-alive)

Функции уровня представления:

Для защиты передаваемых по сети данных часто используется шифрование:
- Secure Sockets Layer
- Transport Layer Security - более современная версия

Протоколы, которые используют TSL/SSL:
- HTTPS, порт 443 - а обычный HTTP использует порт 80
- IMAPS, порт 993
- SMTPS, порт 465
- FTPS

Итог: в стеки протоколов TCP/IP прикладной уровень реализует не только прикладной уровень
OSI, но и уровня представления - шифрование и сеансового уровня - HTTP keep-alive. 
=============================================================================================
45 - Система доменных имен DNS
=============================================================================================
Domain Main System - протокол прикладного уровня.

Зачем нужен DNS? В интернете используются IP-адреса, но людям с ними работать неудобно. А ес
ли адрес в формате IPv6 то его запомнить еще гораздо сложнее. Гораздо удобнее работать с сим
вольными именами. 

Система DNS позволяет преобразовывать имена компьютера в IP-адреса.
Преиимущества DNS:
- понятные человеку имена
- возможность менять сетевую инфраструктуру - при переносе на новый IP-адрес, но доменое имя
то остается прежним.

Утилиты:
для Windows - nslookup www.google.com - вылетают адреса.
Утилиты для Linux - host, dig

Если на наш сервер обращается большое количество клиентов, то мы можем создать несколько серв
веров с разными IP-адресами, но доменое имя будет одно.

До DNS серверо использовали просто файлы. Недостатки:
- быстро увеличивался размер
- сложно вносить изменения
- возможны конфликты имен

Особенности DNS:
1. Распределенная система:
- нет единного сервера, на котором описываются имена хостов

2. Делегированная отвественность:
- пространство имен разделено на отдельные части - домены
- за каждый домен отвечает отдельная организация

3. Надежность:
- дублирование серверов DNS

Имя состоит из нескольки частей, которые отделены друг от друга точками - www.urfu.ru:
ru - домен верхнего уровня
urfu - домен второго уровня
www - имя компьютера

в конце каждого доменного имени подразумевается точка, но ее можно не ставить.

Домены верхнего уровня:

org - для не комерческих организация
com - для коммерческих организация
net - организации связанные с компьютерными сетями

ru
uk
рф

Домены второго уровня ...

Домены третьего уровня или адреса компов для второго уровня, например:

для yandex

www
maps
taxi

То есть адрес читаем справа налево. Несколько серверов DNS могут обслуживать одну и ту же
доменную зону. Корневую зону большего всего обслуживает серверов DNS.

Делегирование домена - ???

Дерево сереверов DNS 

DNS resolver - сервер DNS???

Распределение доменных имен:

Распределение доменных имен занимаются регистраторы. Регистратор корневого домен один:
- Internet Corporation for Assigned Names and Numbers (ICAN)

Регистраторы зон первого уровня - org, com, рф:
- необходима аккредитация ICANN
- один или несколько регистраторов для каждой зоны
- регистрируют домены второго уровня

Зоны ru и рф:

До 2001 года единственный регистратор Российский НИИ развития общественных сетей (ripn.net)

После 2001 года несколько регистраторов, распределенная база данных. 

Регистрация домена - платная услуга, доступная организациям и физическим лицам. 

Корневой домен -  это домен самого верхнего уровня. Обращение к серверам этого домена всегда 
происходит при разрешении имен (кроме случаев кэширования). Например, если мы хотим узнать 
IP адрес www.youtube.com, мы сначала обращаемся к корневому серверу DNS. Он нам дает адрес 
DNS сервера, ответственного за зону .com. Мы обращаемся к этому серверу DNS, он выдает адрес 
сервера, который отвечает за зону youtube.com. Мы обращаемся к этому серверу, он уже знает IP 
адрес для нужного нам имени www.youtube.com. Таким образом, с корневого сервера DNS всегда 
начинается разрешение имен. Подробности в следующей лекции.

DNS-сервер знает, какой IP-адрес соответствует доменному имени. Точнее, не один DNS-сервер, 
а вся система DNS-серверов, объединенных в иерархию. Поэтому работа DNS-сервера заключается 
в том, что он принимает запросы от клиентов и возвращает в ответ IP-адреса для доменных имен, 
или адрес другого DNS-сервера, на котором хранится эта информация.
=============================================================================================
46 - Протокол DNS
=============================================================================================
Режимы работы DNS:
1. Интеративный:
- если сервер отвечает за данную доменную зону - он возрващает ответ
- если не отвечает, то возвращает адрес DNS-сервера, у которого есть более точная информация

2. Рекурсивный:
- Сервер сам выполняет запросы к другим серваерам DNS, чтобы найти нужный адрес. Так работают
сервара разрешения имен DNS. - если бы основные сервара DNS работали этим режимом то они бы
повисли, так как на них идет куча запросов.

Сервер разрешения имен DNS: DNS resolver

Предоставляется провайдером / организацией:
- компьютер получает адрес локального сервера DNS по DHCP

Открытый сервер:
- Google: 8.8.8.8 and 8.8.4.4
- Яндекс: 77.88.8.8 и 77.88.8.7( с блокировкой порно и эротики)

Типы ответов DNS:

1. Авторитетный (authoritative - заслуживающий доверия):
- ответ от сервера, обслуживающего доменную зону
- получен из файлов на диске сервера

2. Неавторитетны (non-authoritative - не заслуживающий доверия): - как правило это
DNS resolver
- ответ от сервера, который не обслуживает доменную зону
- получен из кэша, данные могли устареть

Протокол DNS исользует модель клиент-сервер
запрос - ответ
DNS использует протокол UDP - номер порта - 53

Формат пакет DNS:

Состоит из двух частей - заголовок и данные

Заголовок из 6 полей - всего 12 байт:

1. Идентификатор - любое целое число, должно быть одинаково в запросе и ответе
2. Флаги - будем рассматривать подробнее
3. Количество запросов
4. Количество ответов
5. Количество авторитетных ответов
6. Количество дополнительных ответов

Данные состоят из 4 полей:

1. Запросы DNS
2. Ответы DNS
3. Авторитетные серверы - используется в итеративном режиме работы
4. Дополнительная информация - дополнительные записи, которые могут быть полезны

В одном и том же пакете, может быть несколько запросов и несколько ответов.

Поле Флаги:

1. QR - запрос 0 или ответ 1
2. OPCODE - 4 бита - тип запроса:
0 - стандартный запрос - на практике используется только он
3. AA - авторитетный ответ 1 или нет 0
4. TC - пает был обрезан 1 или не был 0
5. RD - запрос на рекурсивный режим 
6. RA - рекурсивный режим доступен - используется только в ответах, с помощью этого флага 
сервер сообщает, что может работать в рекурсивном режиме
7. Z - зарезервировано
8. RCODE - 4 бита - статус, 0 - успешно, другие коды - ошибка

Формат запроса DNS:

ИМЯ
ТИП ЗАПИСИ
КЛАСС ЗАПИСИ

Формат ответа DNS:

ИМЯ
ТИП ЗАПИСИ
КЛАСС ЗАПИСИ
ВРЕМЯ ЖИЗНИ (TTL) - время, на которое можно сохранить запись в кеш DNS-resolver
ДЛИНА ДАННЫХ - измеряется в байтах
ДАННЫЕ - тут айпишники
=============================================================================================
47 - Типы записей DNS
=============================================================================================
Что еще может делать DNS?
- определять для доменного имени адреса IPv4 и IPv6
- задавать несколько доменных иимен для одного IP-адреса
- Находить адрес почтового сервера для домена
- Определять IP-адрес и порт некоторых сетевых сервисов
- Задавать адрсе DNS-серверов для доменной зона
- определять по IP-адресу доменное имя

Каждая DNS заись (Resorce Record, RR) имеет:
- тип записи - для чего предназначена запись
- класс записи - в каких сетях используется (IN - Интернер) - сейчас применяется только в сети
интернет

Типы записей для IP-адресов:
- A - IPv4 адрес компьютера
- AAAA - IPv6 адрес комьютера

DNS псевдонимы - для одного и того же адреса можно указывать несколько доменных имен, есть
два варианта, как это можно сделать:

1. Использовать DNS запись типа CNAME (Canonical Name Record - каноническая запись имени):
- определяет псевдоним для другого доменного имен
- ftp.something.ru - www.something.ru - таких имен можно создавать очень много

2. Альтернативный способ:
- задать несколько A записей для одного IP-адреса - не очень удобно, если вы будете менять
IP-адрес - его придется менять во многих местах

Система DNS активно используется при работе электронной почты. Нужно отправить почту на адрес
network@gmail.com - как узнать адрес почтового сервера? Это можно сделать  с помощью DNS - 
для этого в DNS есть запсь типа MX - Mail eXchange

Адреса сетевых сервисов:
Для некоторых сервисов можно задавать не только IP-адреса, но и порты:
- Jabber
- CIP
- Kerberos

Для этого используется DNS запись типа SRC (Service record)

Итоги:

Типы записей DNS:
- А - адрес IPv4
- АААА - адрес IPv6
- CNAME - псевдоним для доменного имени
- MX - адрес почтового сервера
- SRV - адреса и порты сетевых сервисов
- NS - адреса DNS-серверов, ответственных за зону
- PTR - доменное имя для IP-адреса
- Другие редко используемые типы записей.
=============================================================================================
48 - Протокол HTTP
=============================================================================================
Hyper Transfer Protocol - протокол передачи гипертекста - используем, когда просматриваем ст
раничке в вебе

Основа World Wide Web

Тим Бернерс-Ли в ЦЕРН предложил концепцию Web в 1989 году:
- язык гипертекстовой разметки страниц HTML
- протокол передаччи гипертекстовых страниц HTTP
- Web-сервер
- Текстовый web-браузер

Сейчас Тим Бернерс-Ли директор консрциума W3C

Гипертекст - специальный тип разметки (HTML) - используются теги, напимрем <h1> ... </h1> - 
говорит, что внутри заголовок. <ul> ... </ul> - список, <li> ... </li> - элемент списка.

Большую роль в работе web и HTTP играет URL - Universal Resource Locator - уникальное положе
ние ресурса. Уникальный адрес web-страницы в интернете.
Формар url: http://www.asozykin.ru/courses/networks

http - название протокола
www.asozykin.ru - доменное имя сервера, на котором расположена страница, либо здесь может
находится IP-адрес сервера
/courses/networks - имя конкретной страницы, которую мы хотим загрузить

Другие протоколы:
- https://www.youtube.com/
- ftp://example.com

Не обязательно гипертекст:
- http://www.ietf.org/rfc/rfc959.txt - на веб серверах могут располагаться обычне текстовые 
странцы

Протокол HTTP находится на прикладном уровне. Режим работы - запрос-ответ, использует прото
кол транспортного уровня TCP и порт сервера 80, порт для клиента генерируется автоматически
операционной системой. Клиент пересылает запрос серверу на передачу web-страницы и сервер
в ответ эту веб страницу пересылает. В отличие от предыдущих рассмотренных протоколов в 
HTTP нету жесткого формата пакетов - используется обычный текстовый режим. 

Есть несколько версий протокола HTTP:

HTTP 0.9 - эксперементальная версия 1991г
HTTP 1 - первая официальная версия протокола, 1996г
HTTP 1.1 - расширение первой версии 1997г.:
- кэширование, keep-alive, aутентификация
- используется сейчас ?
HTTP 2 - современная версия, HTTP 2015 год:
- ввоодится в эксплуатацию 

Структура пакета HTTP - состоит из трех частей:
1. Запрос/статус ответа:
- GET /courses/networks - передать клиенту страницу по адресу
- 200 OK - страница нашлась на сервере и сервер передает ее в теле сообщения
2. Заголовки (не обязательно):
- Host: www.asozykin.ru (обязательно в HTTP 1.1) - на одном и том же IP-адресе может работать
несколько веб сайтов, и веб серверу необходимо знать с какого сайты вы хотите скачать страницу
- Content-Type: text/html; charset=UTF-8 - тип передаваемого сообщения
- Content-Length: 5161 - размер передаваемого сообщения - 5161 байт
- Другие заголовки будут рассмотрены в следующих лекциях
3.Тело сообщения (не обязательно):
- страница HTML
- параметры, введенные пользователем

Клиент при обращение к серверу указывает метод, который он хочет использовать, самые популя
рные методы - GET и POST. Все методы:
- GET - запрос Web-страницы
- POST - передача данных на Web-сервер
- HEAD - запрос заголовка страницы - то же самое, что и GET только без тела
- PUT - помещение страницы на Web-сервер
- DELETE - удаление страницы с Web-сервера
- TRACE - трассирование страницы - что происходит со страницей, кто вносит в нее какие измене
ния
- OPTIONS - запрос поддерживаемых методов HTTP для ресурса
- CONNECT - подключение к Web-серверу через прокси

Статусы HTTP:
- 1xx - информация
- 2хх - успешное выполнение (200 оk)
- 3хх - перенаправление (301 - постоянное перемещение - страница была перемещана на новый ад
рес и все последующие запросы должны передаваться на этот адрес, 307 - временное 
перенаправление)
- 4xx - ошибка на стороне клиента (403 - доступ запрещен, 404 - страница не найдена)
- 5xx - ошибка сервера (500 - внутренняя ошибка сервера)

Примеры запроса и ответа HTTP - работает в текстовом режими:
- Подключение по TCP к серверу www.asozykin.ru, порт 80 
- Пишем запрос : GET /courses/networks HTTP/1.1 - еще указываем версию протокола по которой,
хотим работать, так как мы используем версию 1.1 нам необходимо указать заголовок Host: www.
asozykin.ru

Пример ответ HTTP:

HTTP/1.1 200 OK
Server: ngingx - реализация веб сервера
Content-Type: text/html; charset=UTF-8
Content-Length: 5161
может быть другие заголовки
*пустая строка*
<html>
<head>
...
</html>

после передачи страницы - соединение TCP разрывается, можно оставить соединение открытым для
последующей работы, но для этого необходимо использовать дополнительный заголовок.
=============================================================================================
49 - Постоянное соединение в HTTP - keep alive
=============================================================================================
Когда веб появился он был достаточно простой - протокол HTTP 1.0:
- режим работы - запрос-ответ
- простые текстовые документы

Современные Web-страницы:
- HTML-страницы
- стилевой файл css
- программы Javascript
- картинки (видео, и т.п.)
- блок с других сайтов

Работа HTTP в современных условиях:
- загрузка большого количества ресурсов с Web-сервера

Как реализуется загрузка нескольких ресурсов?:

1. Установка TCP-соединения
2. GET запрос по протоколу HTTP
3. передача HTML страницы от сервера
4. после этого соединение закрывается
5. браузер анализирует содержимое Web-страницы, видит, что необходимо загрузить целевой файл,
большое количество картинок и другие элементы, для того чтобы загрузить новые данные, наприм
ер стилевой файл, необходимо открыть новое соединение:
6. установка TCP-соединения
7. GET запрос на загрузку стилевого файла 
8. сервер в ответ передает этот файл, после чего соединение снова закрывается

Таким образом, чтобы загрузить каждый элемент веб страницы необходимо открыть отдельное соед
инение TCP. Альтернативный подход, который называется постоянное соединение  keep-alive, за
ключается в том, что можно один раз установить соединение TCP и затем использовать его для
загрузки различных ресурсов (не только HTML текста). Соединение TCP закрывается, когда все
элементы Web-страницы загружены.

Постоянное соединение в HTTP - HTTP keep-alive, HTTP persistent connection:
- использование одного TCP-соединения для загрузки нескольких ресурсов
Преимущества постоянного соединения:
- сокращение накладных расходов на установку TCP-соединения, каждый раз не надо проходить про
цедуру трехкратного рукопожатия
- нет необходимости каждый рах начинать передачу данных с маленьким размером окна TCP (медлен
ный старт)

В стандарте HTTP 1.0 возможности использовать постоянное соединение нет. После публикации ст
андарта HTTP 1.0 был предложен заголовок:
- Connection: keep-alive - клиент отправляет этот заголовок, чтобы попросить сервер не закры
вать соединение после того, как сервер передаст страницу

Соединение остается открытым:
 - используется заголовок Connection: keep-alive
- клиент и сервер поддерживают постоянное соединение
- имеется достаточно ресурсов для сохранения соединения открытым 

В стандарте HTTP 1.1 по умолчанию все соединения постоянные. Использование заголовка {'Con
nection': 'keep-alive'} не обязательно
- Многие браузеры и Web-серверы все равно используют этот заголовок

Можно явно попросить закрыть соединение:
- Connection: close

Недостатки постоянного соединения:
Для поддержания соединения Web-серверу нужны ресурсы:
- если клиент открыл соединение и не использует его, то эти ресурсы недоступны другим клиентам
- плохо для высоконагруженного сервера

Автоматическое закрытие соединения - таймаут 5-15 секунд.

Другая технологий - HTTP pipelining - конвейерная обработка:

1. установка соединения
2. отправка get запроса
3. получение от сервера HTML странички
4. анализ браузером содержимого Web-страницы
5. передача сразу нескольких запросов для загрузки ресурсов, не дожидаясь получения ответов
6. сервер, получив сразу несколько запросов, отправляет сразу все запрошенные ресурсы. Недос
таток - ресурсы должны отправляться в том же порядке, в котором пришли запросы. Однако, если
с одни из ресурсов возникли проблемы, то последующие передвать нельзя, даже, если они уже гот
овы к передаче. Эта проблема решена в протоколе HTTP 2.0, где можно нумеровать запросы и 
передавать ресурсы от сервера к клиенту в любом порядке. Конвейерная обработка на практике
используется достаточно редко. 

Еще один вариант - это использовать несколько HTTP соединений. И каждое соединение используе
тся для загрузки разных елементов страницы. Все современные браузеры используют несколько со
единений, как правило от 4 до 8. 
=============================================================================================
50 - Кэширование в HTTP
=============================================================================================
В предыдущей лекции рассмотрели как увеличить скорость загрузки веб страниц. Вот еще один 
способ. Современные Web-браузеры поддерживают кэширование редко меняющихся ресурсов:
- Web-страницы
- Изображния (логотипы компаний, кнопки навигаций и т.п.)
- Таблицы стилей
- Библиотеки Java Script

Кэширование сокращает время загрузки страниц. Требуется место на локальном диске компьютера
для кэша. Протокол HTTP поддерживает работу кэша. 

Как браузеру определить, можно ли брать страницу из кэша? или страница изменилась и необхо
димо обращаться за ней к Web-серверу. В HTTP для этой цели используется заголовок Expires. Э
тот заголовок говорит до какого времени можно хранить этот ресурс в кеше. 
Заголовок Expires:
- Expires: Sun, 12 Jun 2016 10:35:18 GMT
- Указывает до какого времени можно хранитьь ресурс в кэш
- Web-сервера не всегда устанавливают этот заголовок

Если этого заголовка нету, то браузер может применить Эвристики:
- Last-Modified: Wed, 25 May 2016 06:13:24 GMT
- если страницы долго не менялась, то скорее всего можно загрузить ее из кэша
- возможны ошибки

Протокол HTTP содержить другой метод, который может определить изменилась страницы или нет.
Запрос GET с условием. Запрос GET с условием (Conditional GET) - запрос Web-серверу передать
ресурс, если он изменился с указанного времени. Если страница не изменилась, клиент возьмет
страницу из кэш, если страница изменилась, то сервер отдаст страницу.
1. Запрос
Запрос ресурса с помощью GET:
- ответ содержит заголовок Last-Modified - Conditional GET можно использовать, если в HTTP от
вете содержится этот заголовок.
- ресурс записывается в кэш
2. Последующие запросы
Запрос GET с условием:
- ответ содержит заголовое If-Modified-Since - в запросе используется этот заголовок, нем ука
зывается дата, которая берется из Last-Modified
- If-Modified-Since: Wed, 25 May 2016 06:13:24 GMT

Сервер можно передать два варианта на Conditional GET запрос:
1. Ресурс не изменился:
- короткое сообщение
- статус ответа - 304 Not Mofidied
- Дополнительные заголовки: Expires, Last-Modified, Cache-Control

2. Ресурс изменился:
- Полная передача обновленной версии ресурса
- статус ответа - 200 OK

В протоколе HTTP 1.1 появилась другая возможность проверить изменился ресурс или нет - для
этого используется ETag (entity tag):
- код, который генерируется на основе содержимого ресурса
- заголовок Etag добавляется к HTTP ответу
- при изменении содержимого ресурса меняется его ETag
- появился в стандаррте HTTP 1.1

Запрос GET c условием
- заголовок If-None-Match вместо заголовка If-Modified-Since
- If-None-Match: 57454284-3d8f

Этот заголовок может использоваться при передаче страницы на разных языка - в таком случае
этот способ можно.  

В стандарте 1.1 появился заголовок Cache-Control. Заголовок для управления кэшированием, с
помощью которого можно более гибко управлять кэшированием:
- Cache-Control: private, max-age=10	- может содержать несколько элементов.

Возможные значения:
- no store - ресурс нельзя сохранять в кеш
- no-cache - ресурс сохранять в кеш можно, но для его запроса надо выполнить Conditional GET
- public - информация доступна всем и ее можно кэшировать
- private - страница может быть сохранена только в частном кеше браузера, но в не разделяемых
кешах, о которых будет сказано позже
- max-age=86400 - устанавливает время хранения ресурсов в кеше в секундах - использутся вме
сто заголовка Expires

В прокси серверах используется разделяемый кэш. К прокси серверу подключено несколько компью
теров. Эти клиенты обращаются к серверу не напрямую, а через прокси сервер. 

Есть другой тип прокси - reverse proxy - обратный прокси. Он устанавливается со стороны веб
серверов. В ним кэшируются запросы клиентов. Это так же называется разделяемым кешем.

???
За счёт чего увеличивается скорость получения веб страниц в случае обратного прокси если кэш 
находится для нас в интернете и нам всё равно нужно его скачивать? Я думал по большей части 
всё упирается в качество канала и пропускную способность. Имеется ввиду скорость работы 
протокола http в данном случае?
===============================
Нет, имеется в виду время генерации Web-страницы. Сейчас, как правило, почти все Web-сайты 
используют базы данных. Поэтому, посте поступления HTTP-запроса, Web-сервер обращается к 
базе данных. Возможно, несколько раз. Это работает достаточно медленно, особенно когда 
запросов к серверу много.
Обратный прокси-сервер кэширует ответ Web-сервера, и может выдавать его без повторных 
обращений к базе данных.
???
=============================================================================================
51 - Электронная почта
=============================================================================================
Позволяет передавать сообщения, через сеть. Один из самых популярных сервисов. Архитектура
электронной почты:

Агент пользователя (клиент) - Агеннт передачи почты (сервер) - Агент передачи почты (сервер)
- Хранилище сообщений - Агень пользователя (клиент)

Агент пользователя - Mail User Agent - например Microsoft Outlook, или через браузер - Mail.ru
Агент передачи почты - Mail Transfer Agent - определяет получателя, ищет почтовый сервер, ко
торый обслуживает этого получателя и передает сообщение на этот почтовый сервер. 

Используется три протокола:
- SMTP - Simple Mail Tranfer Protocol от агента пользователя к агенту передачи данных, между 
агентами передачи почты
- POP3, IMAP - от хранилища сообщений к агенту пользователя, для чтения из хранилища
POP3 - Post Office Protocol 3
IMAP - Internet Message Access Protocol

Формат адреса электронной почты:
Andrey.Sozykin@urfu.ru

Andrey.Sozykin - индентификатор пользователя
urfu.ru - домен электронной почты

для разделения правой и левой часте используют @

Как по доменному имени найти адрес почтового сервера. Используется система DNS. Тип записи
MX (Mail eXchange) - содержит адреса серверов, принимающих почту для данного домена. Запись
состоит из двух полей - приоритет и доменное имя почтового сервера:
5 gmail-smtp-in.l.google.com
10 alt1.gmail-smtp-in.l.google.com
...
Сначало выбрается сервер с наименьшим приоритетом - в данном случае 5. 

Просмотр записей MX для домена - nslookup -type=mx (gmail.com)
=============================================================================================
52 - Протокол SMTP
=============================================================================================
Simple Mail Transfer Protocol - простой протокол передачи почты. 1982 год создания. Расшире
ная версия ESMTP - в 2008 - в современное время. Теоритически SMTP может использовать любой
транспортный протокол. Порты - порт 25 - передача посчты между почтовыми серверами, порт 587 - 
прием почты от клиента.
На практике используется - протокол TCP и порт 25.

Формат электронного письма:

1. Конверт - команды SMTP
2. Заголовки
3. Тело письма
2 и 3 - RFC 2822

Так же как и HTTP SMTP работает в текстовом режиме, взаимодействие запрос-ответ. Основные ко
манды - HELO, MAIL, RCPT, DATA, QUIT - установка соединения, адрес отправителя, адрес полу
чателя, передача письма, выход.

Ответы SMTP: 

220 - подключение к серверу успешно
250 - успешное вывполение предыдущей команды
354 - начало передачи письма
502 - команда не реализована
503 - неправильная последовательность команд
221 - закрытие соединения

Заголовки письма:
From - отправитель
To - получатель
CC - получатель копия письма
BCC - получатель копии, адрес которого не должен быть показан
Reply-To - адрес для ответа
Subject - тема письма
Date - дата отправки письма

Пустая строка отделяет заголовок от содержания.

Расширение ESMTP:
EHLO - Extended HELO
STARTTLS - использование шифрования
SIZE - объявление максимально возможного размера письма
DSN - подтверждение о доставке письма

SMTP - мог использовать только 7 битные наборы символов
ESMTP - допускает использование 8-битных наборов символов (можно передавать русские буквы)

SMTP не содержит механизмов защиты данных:
- содержимое полей MAIL FROM и FROM никак не контролируется, могу от вашего имени отсылать
почту
- данные передаются по сети в открытом виде
- спам
=============================================================================================
53 - Протокол POP3
=============================================================================================
POP - Post Office Protocol - протокол почтового отделения

POP1 - 1984 year
POP2 - 1985 year
POP3 - 1988 year
Обновленная версия POP3 - 1996 года

Используется для чтения почты, предназначенной для конкретного пользователя из хранилища со
общений. Письма в хранилище доставляются по протоколу SMTP.

Работает по модели - загрузитьи удалить:
- почтовый ящик на сервере считается временным хранилищем сообщений
- все сообщения должны быть переписаны на почтовый клиент
- после загрузки на клиент сообщение удаляетя с сервера

Преимущества:
- простой протокол
- письма доступны при отсутствии подключения к сети

Недостатки:
- только один клиент
- единное хранилище писем (нет папок, фильтров, флагов)

Находится на прикладном уровне, использует протокол TCP и 110 порт.

Состояния сеанса POP3:
- Авторизация - клиент представляется и подтверждает, что он тот, за кого себя выдает
- Транзакция - клиент загружает почту и помечает загруженные сообщения на удаления
- Обновление - сервер удаляет помеченные сообщения и закрывает соединения

Так же как и большинство протоколов прикладного уровня POP3 работает в текстовом режиме, 
взаимодействие запрос-ответ.

Команды POP3:
- USER - указат имя пользователя
- PASS - указать пароль
- STAT - количество писем на сервере
- LIST - передача информации о сообщениях
- PERT - передать сообщение на клиент
- TOP - передать на клиент заголовок сообщения
- DELE - пометить сообщение на удаление
- QUIT - закрытие транзакции, удаление сообщений и отключение

Ответы POP3:
- +OK - успешное выполнение команды
- -ERR - ошибка

Протокол IMAP:
- современный протокол чления электронной почты
- электронная почта хранится на сервере
- обеспечивается работа нескольких клиентов - в POP3 только один.
=============================================================================================
54 - Протокол IMAP
=============================================================================================
IMAP - Internet Message Access Protocol - протокол доступа к электронной почте.
Версии IMAP:
- IMAP1 - 1986 year
- IMAP2 - 1988 year
- IMAP3 - 1991 year
- IMAP4 - 1994 year, last changes in 2003 year

Так же как и POP3 используется для чтения почты  из хранилища сообщений. Для передачи испо
льзуется протокол SMTP.

В отличие от POP3 - письма хранятся на почтовом сервере:
- клиенты подключаются к сервреру и загружают письма только после запроса пользователя
- сервер может выполнять сложные операции с письмами

Преимущества:
- одновременно могут работать несколько клиентов
- все клиенты видят одно и то же состояние почтового ящика

Недостатки:
- протокол более сложен, по сравнению с POP3
- место на сервер для почтового ящика, как правило ограничено

Протокол транспортного уровня - TCP, порт - 143

В отличие от POP3 у этого протокола есть флаги (token) - прочитано письмо или нет и т.д.  

Протокол IMAP работает в текстовом режиме, взаимодействие запрос-ответ, позволяет выполнять не
сколко команд одновременно:
- поиск в большом почтовом ящике
- массовое обновление писем

Ответ IMAP:
- статус - OK, NO, BAD
- поясняющее сообщение
=============================================================================================
55 - Протокол FTP 
=============================================================================================
File Transfer Protocol - протокол передачи файлов. 

Находтся на прикладном уровне. Работает в режими клиент сервер. Для адресации файлов на сер
вере использует url:

ftp://ftp-server.ru/pub/documents/latex/example.text

ftp - индентификатор протокола
ftp-server.ru - имя сервера, здесь может быть DNS имя или IP-адрес
/pub/documents/latex/example.text - путь к файлу, файловой системе

Два отдельных соединения:
1. Управляющее соединение
2. Соединение для данных

Протокол транспортного уровня - TCP
Порт управляющего соединения - 21

Соединение данных:
- активный режим - порт сервера 20 - инициатором для передачи является сервер
- пассивный режим - порты больше 1024 - клиент устанавливает соединение

Протокол FTP требует, чтобы пользователь прошел аутентификацию - необходимо ввести имя поль
зователя и пароль. В зависимости от типа аккаунта - пользователю могут быть предоставлены р
азные права на сервере. 
Есть специальный тип пользователя - анонимный пользователь:
- имя - ftp, anunymous
- пароль - ваш email - рекомендуется, но вообще можно использоваться все что угодно

Протокол работает в текстовом режиме. Команды протокола:

USER - указать имя пользователя
PASS - указать пароль
LIST - просмотр содержимого каталога
CWD - смена текущего каталога
RETR - передать файл с сервера на клиент
STOR - передать файл с клиента на сервер
TYPE - установить режим передачи
DELE - удалить файл
MKD - создать каталог
RMD - удалить каталог
PASV - использовать пассивный режим
QUIT - выход и разрыв соединения

Ответ протокола - статус и поясняющее сообщение - 220 Welcome to the FTP Server

Приме сеанса смотри в видео.

Недостатки протокола:
- проблемы с NAT и межсетевыми экранами - для решения этой проблемы был придумал пассивный
режим
- низкая безопасность - идентификатор пользователя и пароль передаются по сети в открытом 
виде, так же в открытом виде передаются все данные

Замена FTP - протоколы на основп SSH:
- SFTP
- SCP - Secure Copy Protocol
=============================================================================================
=============================================================================================
ЗАЩИЩЕННЫЕ СЕТЕВЫЕ ПРОТОКОЛЫ
=============================================================================================
=============================================================================================
1 - Протоколы TLS/SSL - Защищенные сетевые протоколы
=============================================================================================
Протоколы беезопасной передачи данных в Интернет:
- TLS - Transport Layer Security - протокол защиты транспортного уровня
- SSL - Secure Socket Layer - уровень защищенных сокетов (устарел)

Назначение протоколов - обеспечить безопасную передачу данных в небезопасной сети.

Использование протоколов TLS/SSL:
- HTTPS - Hypertext Transfer Protocol Secure
- SMTPS, POP3S, IMAPS - защищенные протоколы электронной почты

Эти протоколы находятся на транспортном уровне модели TCP/IP - эти протоколы находятя между
транспортным уровнем и прикладным уровнем.

В модели OSI эти протоколы находятся на трех уровнях - транспортный, сеансовый, представления.
Транспортный уровень:
- передача данных между процессами
Сеансовый уровень:
- восстановление сеанса шифрования, который был установлен ранее для повышения производительности
Уровень представления:
- представление данных в зашифрованном виде при передаче по сети

История TLS/SSL:
SSL 3.0 - 1996 RFC 6101

...
TLS 1.2 - 2008 RFC 5246
TLS 1.3 - 2018 RFC 8446

Текущее состояние:
- действующией версии протокола - TLS 1.3 TLS 1.2
- устаревшие TLS 1.1, 1.0, все версии SSL

Что эти протоколы обеспечивают:
- Приватность
- Целостность
- Аутентификацию

Технологии:
- Шифрование
- Криптографически хэш-функции
- Электронная подпись
- Сертификаты открытого ключа

privacy - integrity (целостность - используются хеш функции - очень редко встречаются такие
документы, для которых выдается один и тот же хеш - криптогарфические хеш функции) - 
authentication (защита от атаки man in the middle - тот с кем мы общаемся действительно сер
вер - чтобы защитится использются технологии цифровой подписи, которая позволяет убедиться,
что мы получили данные именно от того, от кого эти данные ждем и инфраструктура открытых клю
чей (public key infrastructure, PKI - чтобы убедиться, что та электронная подпись, действи
тельно принадлжит банку - эта запись открыта))

Как использовать TLS/SSL:

1 вариант - выделенный порт - HTTP - 80 порт - HTTPS - 443 порт 

2 вариант - использование операции STARTTLS - в этом случае сервер работает на обычном порту,
	    но передача происходит по защищенному соединению
=============================================================================================
2 - Шифрование в TLS/SSL
=============================================================================================
Приватность
Целостность
Аутентификация

Как обеспечить приватность? Это защита от пассивной атаки, когда злоумышленник подключается
к каналу связи и читает все, что передают по этому каналу. Для того, чтобы защитится от этого
используется шифрование.

Мы не будем рассмастривать подробно алгоритмы шифрования. Нужно понимать только общую логику
работы.

Два типа шифрования - симметричное шифрование и ассиметричное шифрование.

В симметричном шифрование, чтобы зашифровать и расшифровать данные используется один и тот
же ключ. Иногда называется разделяемый ключ. Шифр Цезаря это пример симметричного шифра. А
также:
- AES
- 3DES
- RC4, RC5, RD6

В ассиметричном шифровании используется два ключа. Открытый ключ. Закрытый ключ. Открытый
ключ может свободно передаваться по каналам связи. В тайне нужно хранить только закрытый к
люч. Закрытый ключ хранится на сервер, а открый ключ передается клиенту. Для шифрования данн
ых использует открытый ключ, а расшифровать данные, которые зашифрованы открытым ключом мо
жно только закрытым ключом. Примеры алгоритмов:
- RSA (Rivest Shamir Adleman)
- DSA, DSS
- Diffie-Hellman

Ассиметричное шифрование:
- открытый ключ может распространяться без ограничений
- работает медленно

Симметричное шифрование:
- ключи должен хранится в тайне
- работает быстро

Гибридное шифрование в TLS/SSL:
- ассиметриченое шифрование для передачи ключа симметричного шифрования
- симметричное шифрование для передачи данных

Схему передачи ключей - смотри в видео.

У RSA нашли много уязвимостей. Поэтому сейчас используется алгоритм Diffie-Hellman. В отлич
чие от RSA этот алгоритм обеспечивает совершенно прямую секретность - невозможно раскодиров
ать зашифрованные данные, даже если есть доступ к серверу. Более совершенный вариант алгори
тма - Диффи-Хеллман на эллиптических кривых. То есть данные в будущем никто не расшифрует, 
даже если ломанет сервер.

Еще раз! Совершенная прямая секретность:
- невозможно расшифровать переданные данные при получении доступа к серверу.
============================================================================================= 
3 - Целостность данных в TLS/SSL
=============================================================================================
Приватность
Целостность
Аутентификация

Злоумышлинник подключается к каналу связи между клиентом и сервером. Активно пытается измен
ить данные так, чтобы клиент и сервер не заметили этих изменений. Самый простой способ изме
нить зашифровованные данные - это обрезать их.

Используются криптографические хэш-функции (hash function):
- преобразование массива данных в строку фиксированной длинны - хэш
- по хэшу нельзя определить, на основе каких данных он был создан
- коллизия - одно и то же значение хэша для разных входных данных

Криптографические хэш функции:
- MD5 (Message Digest 5)
- SHA-1 (Secure Hash Algorith 1), SHA-224, SHA-256, SHA-384, SHA-512 - цифра - количество
бит хэша

Чтобы злоумышленник не подменнил значение хэша, хэш считается не только на основе данных, но
и на основе разделяемого ключа.  . Message Authentication Code.

Для обменна ключами, которые используются для генерации MAC используется ассиметричное шиф
рование.
=============================================================================================
4 - Инфраструктура откррытых ключей в TLS/SSL - Аутентификация в TLS/SSL
=============================================================================================
Приватность
Целостность
Аутентификация

Популярный тип атаки - человек посередине - злоумышленник перехватывает наши сообщения сер
веру, процедуру обмена ключами мы выполняем не самим сервером, а злоумышленником. 

Электронная подпись использует ассиметричное шифрование. В электронной подписи сообщение ши
фруется закрытым ключом и расшифровать такое сообщение можно открытым ключом. Если мы расши
фровали сообщение открым ключом - значит мы можем быть уверены, что его зашифровали закрыты
м ключом - в этом фишка!

Хэш, извлеченный из данных, шифруется закрытым ключом - это и есть электронная подпись. Когда
сервер отправляет данные, он присоединяет к ним электронную подпись. Клиент получает данные
с помощью открытого ключа, который он получил от сервер, клиент расшифровывает электронную 
подпись. И извлекает из нее хэш. Затем с помощью криптографической функции клиент извлекает
хэш из данных. И сравнивает эти хэши между собой, если эти хэши совпадают, значит мы получили
сообщение от сервера. Одного механизма электронно подписи недостаточно, чтобы не подвергнуть
ся атаки человека по середине.

Для этого используется инфраструктура открытых ключей. Есть удостоверяющие центры. Центры
выдают сервера сертификаты, в котором есть открытый ключ сервера. Удостоверяющий центр под
писывает сертификат своим закрытым ключом. 

Инфраструктура открытых ключей. Удостоверяющие центры, объединенные в иерархию.

В операционных системах создаются хранилища сертификатов.

В хроме можно узнать про эти сертификаты, хранящиеся в ос. Настройки - конфиденциальность и 
безопасность - еще - настроить сертификат. Там перечисленны сертификаты корневых удостоверя
ющих центров. 

Самоподписанный сертификат. В этом случае сервер создает сертификат сам и подписывает его 
своим закрытым ключом, не обращаясь за подписью к удостоверяющему центру. Таким образом, ко
гда вы получаете от сервера самоподписанный сертификат, вы не можете быть уверены в его под
линности.

В самодписанных сертификатах нет ничего пренципиально плохого. Все сертификаты корневых удо
стоверяющих центров - самоподписанные. 
=============================================================================================
5 - Протокол TLS
=============================================================================================
Протоколы безопасной передачи данных по небезопасной сети. Приватность целостность, аутентифи
кация.

Текущая версия протокола 1.2, 1.3 - новая версия, вводитя в эксплуатацию.

Протокол работает поверх протокола TCP и получает данные от протоколов прикладного уровня, на
пример HTTP - то есть сам он находится на транспортном уровне. 

Сам протокол TLS состоит из двух уровней:
1 - Нижний уровень - протокол записей - задает формат, в котором данные будут передаваться
по сети. Record protocol.
2 - Верхний уровень содержит четыре протокола:
	1 - протокол установки соединения - Handshake protocol
	2 - протокол оповещения - Alert protocol
	3 - протокол смены шифра - Change cipher protocol
	4 - протокол передачи данных - Application data protocol

Протокол записи (record protocol) - основа TLS:
- В записи record protocol вкладываются сообщения вышестоящих протоколов TLS
- Алгоритмы шифрования и целостности работают на уровне записей
- Сообщения протокола записей вкладываются в сегменты TCP

Форма сообщеиня протокола записи:
тип сообщения; версия протокола; длина сообщения - не шифруются
сообщение - шифруется

Необходима установка сессии TLS: Создание сессии:
- установка соединения с помощью Handshake protocol
- возобновление соединения, которое было установлено ранее

Процесс передачи сообщений:
1 - сообщение спускается от вышестоящего прикладного протокола
2 - сообщение разбивается на фрагменты
3 - с помощью ключа mac вычисляется хэш фрагмента сообщения
4 - вычисленны mac присоединяется к сообщению
5 - сообщение и mac вместе шифруются с помощью ключа симметричного шифрования
6 - зашифрованное сообщение передается получателя
7 - этот элемент расшифровывается получателем с помощью ключа симметричного шифрования
8 - далее с помощью ключа mac получатель проверяет mac - если он тот самый - значит сооб
щение не было имзененно в пути его следования
9 - этот фрагмент сообщения складывается в буфер хранения, получатель ждет следующий фрагмен
т сообщения
10 - фрагменты собираются в одно сообщение
11 - сообщение передается на вышестоящий протокол прикладного уровня

Протокол оповещения (alert protocol):
- сообщения об ошибках в работе TLS

Фатальные ошибки:
- сессия TLS должна быть разорвана немедленно
- ошибка MAC (bad_record_mac)
- неизвестный удостоверяющий центр (unknown_ca)
- ошибка расшифровки (decrypt_error)

Предупреждения:
- сессия может продолжать работать
- срок действия сертификата завершен (certificate_expired)
- сертификат отозван (certificate_revoked)
- неизвестный формат сертификата (unsupported_certificate)

=============================================================================================
6 - Установка соединения в TLS
=============================================================================================
Перед тем как начать передачу данных по защищенному каналу передачи необходимо устновить со
единение TLS между сервером и клиентом. 

Клиенту и серверу необходимо договориться какие криптографические технологии будут использо
ваться - набор шифров TLS:

- алгоритм обмена ключами: например - Деффи-Хеллмана
- алгоритм цифровой подписи: например - RSA
- алгоритм симметриченого шифрование: например - AES
- хэш-функция для MAC: например - SHA-256

Кроме того, необходимо убедиться в подлинности сервера, для того, чтобы понять, что не проис
ходит атака "Человек по середине".

Так же клиент и сервера в процессе установки соединения обмениваются разделяемыми ключами:

- ключ для симметричного шифрования данных

- ключ MAC

Как происходит процесс установки соединения TLS 1.2 (в 1.3 есть существенные изменения):

1. Клиент высылает сообщение серверу - Client hello - в это сообщение клиент вставляет:
	
	- перечень шифров TLS, с которыми клиент может работать

	- client random - случайное простое число, которое будет использоваться потом для ген
	ерации ключей симметричного шифрования

2. Получил от клиента сообщение, сервера отсылает клиенту сообщение Server hello, в это сооб
щение сервер вкладывает:

	- выбранный шифр TLS, из того перечня который предложил клиент

	- server random - число, которое будет использоваться при генерации ключей симметри
	чного шифрования

	- идентификатор сессии, по которому сессию можно будет восстановить через некоторое
	время, то есть повтороно использовать те же самые алгоритмы шифрования и те же сам
	ые ключи, которые будут сгенерированы в рамка установки этого соединения, ассииметри
	чное шифрование, которое используется для обмена ключами, требует больших вычислитель
	ных ресурсов и работает очень медленно, поэтому сессия актуальна

3. Сервер следующим сообщением отправляет клиенту сертификат - файл открытого вида, в котором
находится ключ сервера, некоторая другая информация о сервере, и этот сертификат подписан ци
фровой подписью удостоверяющего центра, которому доверяет наш клиент.

4. Клиент получает сертификат от сервера и прежде, чем продолжить соединение, проверяет про
верку сертификата. Что включает эта проверка:
	
	- проверка подписей удостоверяющих центров
	
	- проверка "доверия" корневому удостоверяющему центу

	- проверка домена сертификата, могут подложить настоящий сертификат, но для другого
	сервера

	- проверка срока действия сертифика

	- проверка, не отозван ли сертификат - владелец может отозвать сертификат, если поте
	рял контроль над сайтом

	- а также некоторые другие проверки

Если все проверки прошли успешно, то клиент может считать подлинность сервера - подтвержден
ной. Конечно, учитывая ту степень доверия, с которой мы доверяем удостоверяющему центру, ко
торый подписал сертификат сервера.

5. Затем сервер отправляет сообщение для обмена ключами - ServerKeyExchange - сообщение явл
яется необязательным, и может либо отправляться, или неотправлятся в зависимости от того, ка
кой алгоритм обмена ключами используется. В статическом варианте Дефи-Хеллмана параметры алго
ритма передаются в сертификате, это открытые числа p, g и расчитанное сервером число Ys. Ста
тический алгоритм Дефи-Хеллмана также как и RSA не позволяет обеспечить совершенную прямую
секретность - если сервер взломают - расшифрует все ваши прошлые сессии. Если мы хотим обе
спечить совершенную прямую секретность, то параметры p, g, Ys должны выбираться каждый раз
заново. Это алгоритм Deffie-Hellman Ephemeral (DHE).

6. Сервер передает сообщение Server Hello Done - сервер передал все сообщения, которые отно
сятся к первой фазе установки соединения, и клиенту можно больше ничего не ждать от сервера.

7. Начало процедуры обмены ключами. Клиент передает серверу информацию - сообщение Client Key
Exchange - необходимую для получения разделяемого ключа. Что это за информация - зависит от 
типа алгоритма обмена ключами.
Есои это RSA, то используется открытый ключ сервера, который находится в сертификате. Клиент
генерирует ключ pre-master secret - некоторый предварительный ключ, на основе которого созд
ается разделяемый ключ для симметричного шифрования. Клиент использует открытый ключ из сер
тифика зашифровывает pre-master secret и передает его на сервер. У сервера есть закрытый ключ,
с помощью которого можно расшифровать это сообщение. Таким образом сервер получает значение
pre master secret, на основе которого на следующем этапе клиент и сервер расчитывают ключ для
симметричного шифрования и ключа для MAC.
Если это алгоритм Деффи-Хеллмана. Клиент передает значение Yc. Клиент генерирует некоторое
случайное число, возводит g в эту степень, берет остаток от деления на p. Напомним, что p и g
клиент получил от сервера в сообщении Server Key Exchange. На основе Yc сервер и клиент полу
чают pre-master secret - предварительный разделяемый ключ. 
Чтобы расчитать разделяемые ключи используется псевдослучайная функция на основе pre-master
secret, client random, server random. Два последних параметра переданы в сообщениях Client
hello and Server hello.
Псевдо случайная функция генерирует ключ симметричного шифрования и ключ MAC.
Теперь можно переключаться на безопасное соединение.

8. Клиент посылает сообщение Change Cipher Spec. Клиент уведомляет, что готов работать с тем
набором шифров и теми ключами, которые сгенерировали.

9. Клиент отправляет сообщение Finished - первое зашифрованое сообщение. 

10. Сервер проверяет сообщение клиента, если оно пришло без изменений, то выдает сообщение для
клиента - Change Cipher Spec, а затем Finished.

После этого соединение является установленным.

Разрыв сообщения:

1. Допустиим клиент отсылает сообщение close_notify (Alert protocol TLS). После отправки так
ого сообщения клиент считает соединение разорванным и может игнорировать все сообщения, кот
орые ему присылает сервер.
2. Сервер после получения такого сообщения от клиента обязан тоже отправить сообщение close_
notify

Восстановление сессии TLS:

Процесс обмена данными требует длительного времени и вычислительных мощностей. Поэтому исполь
зуются те же самые ключи и набор шифров при повторной установке соединения.

1. Клиент в сообщении Client hello включает индентификатор сессии. 

2. Если сервер нашел такой индентификатор сессии, то сервер высылает следующие сообщения сразу:

	Server hello
	Change Cipher Spec
	Finished

3. Клиент с помощью ключа симметричного шифрования и ключа MAC проверяет сообщение Finished 
от сервера, и если все прошло успешно, отсылает серверу сообщение Change Cipher Spec and Fin
ished.

4. После этого соединение TLS восстановлено.

Еще один вариант восстановики соединения, когда нам необходимо проверить подлинности клиента:

После сообщения Server Key Exchange сервер отправляет запрос на сертификат, потом Sever Hello
Done.

Клиент отправялет свой сертификат - он должен быть у клиента, полученный у удостоверяющего 
центра, которому доверяет сервер.

Это проверка не является обязательной и используется достаточно редко.

Процесс установки соединения в протоколе TLS 1.3 - упростоился и стал проще, быстрее.

=============================================================================================
















































































































































































































































































































































































































































































































































































































































































 




















































































































  
















































































 













































































 















































































































































































































































































































































































 










































































 



























































































































































































































  



